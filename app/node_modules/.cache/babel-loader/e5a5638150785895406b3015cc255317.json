{"ast":null,"code":"import { AssignNode, BinaryOperatorNode, CompoundNode, isComputableNode, SingleValueNode, UnaryOperatorNode, VariableNode, ProcedureCallNode, VariableScope, ProcedureDefinitionNode, EmptyNode, TernaryOperator } from \"./ast\";\nimport { Numeric, Logical, UnevaluatedMatrix } from \"./computable\";\nimport { MatrixError, ParsingError, SymbolError, SyntaxError } from \"./errors\";\nimport { Lexer } from \"./lexer\";\nimport { TokenType, isNumericToken, isSymbolToken } from \"./token\";\nexport class Parser {\n  constructor(lexer) {\n    this.lexer = void 0;\n    this.current_token = void 0;\n    this.lexer = lexer;\n    this.current_token = this.lexer.next_token();\n  }\n  /**\n   * parse tokens into an abstract syntax tree for traversal\n   */\n\n\n  parse() {\n    let node = this.program();\n\n    if (this.current_token.type != TokenType.eof) {\n      throw new SyntaxError(\"parsing didn't go as expected!\");\n    }\n\n    return node;\n  }\n  /**\n   * identify expression\n   * expr   : term ((PLUS | MINUS) term)* | term ((PLUS | MINUS)term)*\n   * term   : powers ((MUL | DIV ) powers)*\n   * powers : factor ((POW) factor)*\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix | variable | procedure | (TRUE | FALSE)\n   * matrix :  lbracket (row)* rbracket\n   */\n\n\n  expr(ignoreWhiteSpace, scope) {\n    let opsOrder = [{\n      tokens: [TokenType.pow],\n      igws: ignoreWhiteSpace,\n      scope: scope\n    }, {\n      tokens: [TokenType.mul, TokenType.div, TokenType.rdiv],\n      igws: true,\n      scope: scope\n    }, {\n      tokens: [TokenType.plus, TokenType.minus],\n      igws: ignoreWhiteSpace,\n      scope: scope\n    }, {\n      tokens: [TokenType.and, TokenType.or],\n      igws: ignoreWhiteSpace,\n      scope: scope\n    }, {\n      tokens: [TokenType.larrow, TokenType.rarrow, TokenType.eq, TokenType.less_eq, TokenType.more_eq],\n      igws: ignoreWhiteSpace,\n      scope: scope\n    }, {\n      tokens: [TokenType.and_bool],\n      igws: true,\n      scope: scope\n    }, {\n      tokens: [TokenType.or_bool],\n      igws: true,\n      scope: scope\n    }];\n    let func = this.factor;\n\n    for (let op of opsOrder) {\n      func = this.binops(func, op.tokens, op.igws);\n    }\n\n    let expr = func.call(this, scope); // if ? ternary operation, otherwise return\n\n    if (this.current_token.type == TokenType.ternary) {\n      this.eat(TokenType.ternary);\n      let t = this.expr(ignoreWhiteSpace, scope);\n      this.eat(TokenType.colon);\n      let f = this.expr(ignoreWhiteSpace, scope);\n      return new TernaryOperator(expr, t, f);\n    }\n\n    return expr;\n  }\n  /**\n   *\n   * @param func\n   * @param operators\n   * @param ignoreWhiteSpace\n   */\n\n\n  binops(func, operators, ignoreWhiteSpace = true) {\n    return scope => {\n      // left node\n      let node = func.call(this, scope);\n      let token = this.current_token;\n\n      while (operators.includes(token.type)) {\n        if (ignoreWhiteSpace || this.lexer.peek(1) == \" \" || this.lexer.peek(-1) != \" \") {\n          this.eat(token.type);\n          node = new BinaryOperatorNode(node, token, func.call(this, scope));\n          token = this.current_token;\n        } else {\n          return node;\n        }\n      }\n\n      return node;\n    };\n  }\n  /**\n   * identify factor\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix\n   * matrix :  lbracket (row)* rbracket\n   * @return abstract syntax node\n   */\n\n\n  factor(scope) {\n    let token = this.current_token;\n\n    if (token.type == TokenType.plus) {\n      // positive sign\n      this.eat(TokenType.plus);\n      return new UnaryOperatorNode(token, this.factor(scope));\n    } else if (token.type == TokenType.minus) {\n      // negation sign\n      this.eat(TokenType.minus);\n      return new UnaryOperatorNode(token, this.factor(scope));\n    } else if (isNumericToken(token)) {\n      // token is a number\n      this.eat(TokenType.num);\n      return new SingleValueNode(new Numeric(token.value));\n    } else if (token.type == TokenType.lparen) {\n      // lparen expr rparen\n      this.eat(TokenType.lparen);\n      let node = this.expr(true, scope);\n      this.eat(TokenType.rparen);\n      return node;\n    } else if (token.type == TokenType.lbracket) {\n      // matrix\n      return new SingleValueNode(this.matrix());\n    } else if (token.type == TokenType.larrow) {\n      // vector (meaning single row matrix)\n      return new SingleValueNode(this.vector());\n    } else if (token.type == TokenType.primitive) {\n      return this.primitive();\n    } else if (token.type == TokenType.id) {\n      // identifier\n      let next = this.lexer.peekToken();\n\n      if (next.type == TokenType.lparen) {\n        // look for procedure\n        let proc = this.procedure(scope); // check if defining a procedure or calling it\n\n        let next = this.current_token;\n\n        if (next.type == TokenType.assign || next.type == TokenType.define) {\n          return this.procedure_definition(proc, scope);\n        } else {\n          return proc;\n        }\n      } else {\n        // variable identifier\n        return this.variable(scope);\n      }\n    }\n\n    return new EmptyNode();\n  }\n  /**\n   * a primitive alphanumeric type like boolean\n   */\n\n\n  primitive() {\n    let token = this.current_token;\n\n    if (token.type == TokenType.primitive) {\n      if (token.value === Lexer.reserved_keywords[\"true\"].value) {\n        this.eat(TokenType.primitive);\n        return new SingleValueNode(new Logical(true));\n      } else if (token.value === Lexer.reserved_keywords[\"false\"].value) {\n        this.eat(TokenType.primitive);\n        return new SingleValueNode(new Logical(false));\n      }\n    }\n\n    throw new ParsingError(\"unexpected symbol: \" + token.value);\n  }\n  /**\n   * vector : single row matrix\n   */\n\n\n  vector() {\n    // check left arrow\n    this.eat(TokenType.larrow); // get one row\n\n    let row = this.matrix_row(TokenType.rarrow); // check right arrow\n\n    this.eat(TokenType.rarrow);\n    return new UnevaluatedMatrix([row]);\n  }\n  /**\n   * matrix :  lbracket (row ;)* (row ]) rbracket\n   */\n\n\n  matrix() {\n    let arr = new Array(); // check left bracket\n\n    this.eat(TokenType.lbracket, \"parsing matrix: \"); // loop through rows\n\n    while (this.current_token.type != TokenType.rbracket) {\n      let row = this.matrix_row(TokenType.rbracket);\n      arr.push(row);\n\n      if (this.current_token.type == TokenType.semicolon) {\n        this.eat(TokenType.semicolon, \"parsing matrix row: \");\n      }\n    } // check right bracket\n\n\n    this.eat(TokenType.rbracket, \"parsing matrix: \");\n    return new UnevaluatedMatrix(arr);\n  }\n  /**\n   * row : (factor,)*\n   */\n\n\n  matrix_row(endToken) {\n    let arr = new Array();\n\n    while (true) {\n      let val = this.expr(false, VariableScope.global); // make sure the element is computable\n\n      if (isComputableNode(val)) {\n        // everything else is good, push element into row\n        arr.push(val); // if row hasn't reached end, consume 'comma' separator\n\n        if (this.current_token.type != TokenType.semicolon && this.current_token.type != endToken) {\n          if (this.current_token.type == TokenType.comma) {\n            this.eat(TokenType.comma, \"parsing matrix row: \");\n          }\n        } else {\n          break;\n        }\n      } else {\n        throw new MatrixError(\"matrix parsing error: expected a numeric element\");\n      }\n    }\n\n    return arr;\n  }\n  /**\n   * consume token and advance to next token\n   * @param type token type to verify\n   */\n\n\n  eat(type, message) {\n    if (this.current_token.type == type) {\n      // if expected token type and current token type matches, proceed to next token\n      this.current_token = this.lexer.next_token();\n    } else {\n      // if token type does not match, a syntax error has happened\n      throw new SyntaxError(message || \"\" + \"expected \" + type.toString() + \", but got \" + this.current_token.type.toString());\n    }\n  }\n  /**\n   * variable : id\n   */\n\n\n  variable(scope = VariableScope.global) {\n    if (isSymbolToken(this.current_token)) {\n      let node = new VariableNode(this.current_token, scope);\n      this.eat(TokenType.id);\n      return node;\n    }\n\n    throw new SymbolError(\"couldn't parse variable name\");\n  }\n  /**\n   * program : compound eof\n   */\n\n\n  program() {\n    let node = this.compound(VariableScope.global);\n    this.eat(TokenType.eof);\n    return node;\n  }\n  /**\n   * compound: statement_list\n   */\n\n\n  compound(scope) {\n    return new CompoundNode(this.statement_list(scope));\n  }\n\n  ignoreNewLines() {\n    // ignore all end lines\n    while (this.current_token.type === TokenType.endl) {\n      this.eat(TokenType.endl);\n    }\n  }\n  /**\n   * statement_list : statement | statement endl statement_list\n   */\n\n\n  statement_list(scope) {\n    this.ignoreNewLines();\n    let results = this.statement(scope);\n\n    while (this.current_token.type == TokenType.endl) {\n      this.ignoreNewLines();\n      results = results.concat(this.statement(scope));\n    }\n\n    if (this.current_token.type == TokenType.id) {\n      throw new SyntaxError(\"unexpected identifier\");\n    }\n\n    return results;\n  }\n  /**\n   * statement : id_statement | expr\n   */\n\n\n  statement(scope = VariableScope.global) {\n    if (this.current_token.type == TokenType.id) {\n      return this.id_statement(scope);\n    } else if (this.current_token.type == TokenType.reserved) {\n      return this.reserved_statement();\n    } else if (this.current_token.type != TokenType.eof) {\n      return [this.expr(true, scope)];\n    } else {\n      return [];\n    }\n  }\n\n  reserved_statement() {\n    let token = this.current_token;\n    throw new ParsingError(\"unexpected reserve word\");\n  }\n  /**\n   * create a user defined procedure\n   * @param proc\n   */\n\n\n  procedure_definition(proc, currentScope) {\n    if (currentScope == VariableScope.procedure) {\n      throw new ParsingError(\"nested functions aren't supported!\");\n    }\n\n    this.eat(this.current_token.type); // make sure all of the parameters are variables\n\n    let args = proc.args;\n\n    if (VariableNode.isVariableArray(args)) {\n      // change scope of variables\n      for (let arg of args) {\n        arg.scope = VariableScope.procedure;\n      } // load expressions\n\n\n      if (this.current_token.type == TokenType.lbrace) {\n        // multi line statements\n        this.eat(TokenType.lbrace); // @ts-ignore ignore the stupid if check since current_token changes in this.eat()\n\n        let exprs = this.compound(VariableScope.procedure);\n        this.eat(TokenType.rbrace);\n        return new ProcedureDefinitionNode(proc.name, args, exprs);\n      } else {\n        // single line expression\n        let expr = this.expr(true, VariableScope.procedure);\n        return new ProcedureDefinitionNode(proc.name, args, new CompoundNode([expr]));\n      }\n    } else {\n      throw new ParsingError(\"cannot define a function with non-variable parameters\");\n    }\n  }\n  /**\n   * id_statement : assignemnt | procedure | expr\n   */\n\n\n  id_statement(scope) {\n    let token = this.current_token;\n\n    if (token.type == TokenType.id) {\n      if (this.lexer.peekToken().type == TokenType.assign) {\n        return this.assignment(scope);\n      } else {\n        return [this.expr(true, scope)];\n      }\n    }\n\n    throw new ParsingError(\"couldn't find an identifier!\");\n  }\n  /**\n   * assignment : (variable = expr) (,variable = expr)*\n   */\n\n\n  assignment(scope) {\n    let left = this.variable(scope);\n    let token = this.current_token;\n    this.eat(TokenType.assign, \"parsing assignment: \");\n    let right = this.expr(true, scope);\n    let assignments = [new AssignNode(left, token, right)]; //  check if multiline assignment\n\n    if (this.current_token.type == TokenType.comma) {\n      this.eat(TokenType.comma);\n      let next = this.assignment(scope);\n      assignments = assignments.concat(next);\n    }\n\n    return assignments;\n  }\n  /**\n   * procedure : id lparen (expr,)* rparen\n   */\n\n\n  procedure(scope) {\n    let token = this.current_token;\n\n    if (!isSymbolToken(token)) {\n      throw new SymbolError(\"expected an identifier symbol but didn't get it!\");\n    }\n\n    this.eat(TokenType.id);\n    this.eat(TokenType.lparen);\n    let args = [];\n\n    while (this.current_token.type != TokenType.rparen) {\n      args.push(this.expr(true, scope));\n\n      if (this.current_token.type == TokenType.comma) {\n        this.eat(TokenType.comma);\n      } else {\n        break;\n      }\n    }\n\n    this.eat(TokenType.rparen);\n    return new ProcedureCallNode(token, args);\n  }\n\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/app/src/interpreter/parser.ts"],"names":["AssignNode","BinaryOperatorNode","CompoundNode","isComputableNode","SingleValueNode","UnaryOperatorNode","VariableNode","ProcedureCallNode","VariableScope","ProcedureDefinitionNode","EmptyNode","TernaryOperator","Numeric","Logical","UnevaluatedMatrix","MatrixError","ParsingError","SymbolError","SyntaxError","Lexer","TokenType","isNumericToken","isSymbolToken","Parser","constructor","lexer","current_token","next_token","parse","node","program","type","eof","expr","ignoreWhiteSpace","scope","opsOrder","tokens","pow","igws","mul","div","rdiv","plus","minus","and","or","larrow","rarrow","eq","less_eq","more_eq","and_bool","or_bool","func","factor","op","binops","call","ternary","eat","t","colon","f","operators","token","includes","peek","num","value","lparen","rparen","lbracket","matrix","vector","primitive","id","next","peekToken","proc","procedure","assign","define","procedure_definition","variable","reserved_keywords","row","matrix_row","arr","Array","rbracket","push","semicolon","endToken","val","global","comma","message","toString","compound","statement_list","ignoreNewLines","endl","results","statement","concat","id_statement","reserved","reserved_statement","currentScope","args","isVariableArray","arg","lbrace","exprs","rbrace","name","assignment","left","right","assignments"],"mappings":"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","sourcesContent":["import {\n  AssignNode,\n  AST,\n  BinaryOperatorNode,\n  CompoundNode,\n  ComputableNode,\n  isComputableNode,\n  SingleValueNode,\n  UnaryOperatorNode,\n  VariableNode,\n  ProcedureCallNode,\n  VariableScope,\n  ProcedureDefinitionNode,\n  EmptyNode,\n  TernaryOperator,\n} from \"./ast\";\nimport { Numeric, Logical, UnevaluatedMatrix } from \"./computable\";\nimport { MatrixError, ParsingError, SymbolError, SyntaxError } from \"./errors\";\nimport { Lexer } from \"./lexer\";\nimport { TokenType, Token, isNumericToken, isSymbolToken } from \"./token\";\n\ninterface Operation {\n  tokens: TokenType[];\n  igws: boolean;\n  scope: VariableScope;\n}\nexport class Parser {\n  private lexer: Lexer;\n  private current_token: Token;\n\n  constructor(lexer: Lexer) {\n    this.lexer = lexer;\n    this.current_token = this.lexer.next_token();\n  }\n\n  /**\n   * parse tokens into an abstract syntax tree for traversal\n   */\n  public parse(): AST {\n    let node = this.program();\n    if (this.current_token.type != TokenType.eof) {\n      throw new SyntaxError(\"parsing didn't go as expected!\");\n    }\n    return node;\n  }\n\n  /**\n   * identify expression\n   * expr   : term ((PLUS | MINUS) term)* | term ((PLUS | MINUS)term)*\n   * term   : powers ((MUL | DIV ) powers)*\n   * powers : factor ((POW) factor)*\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix | variable | procedure | (TRUE | FALSE)\n   * matrix :  lbracket (row)* rbracket\n   */\n  private expr(ignoreWhiteSpace: boolean, scope: VariableScope): AST {\n    let opsOrder: Operation[] = [\n      {\n        tokens: [TokenType.pow],\n        igws: ignoreWhiteSpace,\n        scope: scope,\n      },\n      {\n        tokens: [TokenType.mul, TokenType.div, TokenType.rdiv],\n        igws: true,\n        scope: scope,\n      },\n      {\n        tokens: [TokenType.plus, TokenType.minus],\n        igws: ignoreWhiteSpace,\n        scope: scope,\n      },\n      {\n        tokens: [TokenType.and, TokenType.or],\n        igws: ignoreWhiteSpace,\n        scope: scope,\n      },\n      {\n        tokens: [\n          TokenType.larrow,\n          TokenType.rarrow,\n          TokenType.eq,\n          TokenType.less_eq,\n          TokenType.more_eq,\n        ],\n        igws: ignoreWhiteSpace,\n        scope: scope,\n      },\n      { tokens: [TokenType.and_bool], igws: true, scope: scope },\n      { tokens: [TokenType.or_bool], igws: true, scope: scope },\n    ];\n    let func = this.factor;\n    for (let op of opsOrder) {\n      func = this.binops(func, op.tokens, op.igws);\n    }\n    let expr = func.call(this, scope);\n\n    // if ? ternary operation, otherwise return\n    if (this.current_token.type == TokenType.ternary) {\n      this.eat(TokenType.ternary);\n      let t = this.expr(ignoreWhiteSpace, scope);\n      this.eat(TokenType.colon);\n      let f = this.expr(ignoreWhiteSpace, scope);\n      return new TernaryOperator(expr, t, f);\n    }\n    return expr;\n  }\n\n  /**\n   *\n   * @param func\n   * @param operators\n   * @param ignoreWhiteSpace\n   */\n  private binops(\n    func: (scope: VariableScope) => AST,\n    operators: TokenType[],\n    ignoreWhiteSpace: boolean = true\n  ) {\n    return (scope: VariableScope): AST => {\n      // left node\n      let node: AST = func.call(this, scope);\n      let token: Token = this.current_token;\n      while (operators.includes(token.type)) {\n        if (\n          ignoreWhiteSpace ||\n          this.lexer.peek(1) == \" \" ||\n          this.lexer.peek(-1) != \" \"\n        ) {\n          this.eat(token.type);\n          node = new BinaryOperatorNode(node, token, func.call(this, scope));\n          token = this.current_token;\n        } else {\n          return node;\n        }\n      }\n      return node;\n    };\n  }\n\n  /**\n   * identify factor\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix\n   * matrix :  lbracket (row)* rbracket\n   * @return abstract syntax node\n   */\n  private factor(scope: VariableScope): AST {\n    let token = this.current_token;\n    if (token.type == TokenType.plus) {\n      // positive sign\n      this.eat(TokenType.plus);\n      return new UnaryOperatorNode(token, this.factor(scope));\n    } else if (token.type == TokenType.minus) {\n      // negation sign\n      this.eat(TokenType.minus);\n      return new UnaryOperatorNode(token, this.factor(scope));\n    } else if (isNumericToken(token)) {\n      // token is a number\n      this.eat(TokenType.num);\n      return new SingleValueNode(new Numeric(token.value));\n    } else if (token.type == TokenType.lparen) {\n      // lparen expr rparen\n      this.eat(TokenType.lparen);\n      let node: AST = this.expr(true, scope);\n      this.eat(TokenType.rparen);\n      return node;\n    } else if (token.type == TokenType.lbracket) {\n      // matrix\n      return new SingleValueNode(this.matrix());\n    } else if (token.type == TokenType.larrow) {\n      // vector (meaning single row matrix)\n      return new SingleValueNode(this.vector());\n    } else if (token.type == TokenType.primitive) {\n      return this.primitive();\n    } else if (token.type == TokenType.id) {\n      // identifier\n      let next = this.lexer.peekToken();\n      if (next.type == TokenType.lparen) {\n        // look for procedure\n        let proc = this.procedure(scope);\n        // check if defining a procedure or calling it\n        let next: Token = this.current_token;\n        if (next.type == TokenType.assign || next.type == TokenType.define) {\n          return this.procedure_definition(proc, scope);\n        } else {\n          return proc;\n        }\n      } else {\n        // variable identifier\n        return this.variable(scope);\n      }\n    }\n\n    return new EmptyNode();\n  }\n\n  /**\n   * a primitive alphanumeric type like boolean\n   */\n  private primitive(): AST {\n    let token = this.current_token;\n    if (token.type == TokenType.primitive) {\n      if (token.value === Lexer.reserved_keywords[\"true\"].value) {\n        this.eat(TokenType.primitive);\n        return new SingleValueNode(new Logical(true));\n      } else if (token.value === Lexer.reserved_keywords[\"false\"].value) {\n        this.eat(TokenType.primitive);\n        return new SingleValueNode(new Logical(false));\n      }\n    }\n    throw new ParsingError(\"unexpected symbol: \" + token.value);\n  }\n  /**\n   * vector : single row matrix\n   */\n  private vector(): UnevaluatedMatrix {\n    // check left arrow\n    this.eat(TokenType.larrow);\n    // get one row\n    let row = this.matrix_row(TokenType.rarrow);\n    // check right arrow\n    this.eat(TokenType.rarrow);\n    return new UnevaluatedMatrix([row]);\n  }\n\n  /**\n   * matrix :  lbracket (row ;)* (row ]) rbracket\n   */\n  private matrix(): UnevaluatedMatrix {\n    let arr: ComputableNode[][] = new Array();\n    // check left bracket\n    this.eat(TokenType.lbracket, \"parsing matrix: \");\n    // loop through rows\n    while (this.current_token.type != TokenType.rbracket) {\n      let row = this.matrix_row(TokenType.rbracket);\n      arr.push(row);\n      if (this.current_token.type == TokenType.semicolon) {\n        this.eat(TokenType.semicolon, \"parsing matrix row: \");\n      }\n    }\n    // check right bracket\n    this.eat(TokenType.rbracket, \"parsing matrix: \");\n    return new UnevaluatedMatrix(arr);\n  }\n\n  /**\n   * row : (factor,)*\n   */\n  private matrix_row(endToken: TokenType): ComputableNode[] {\n    let arr: ComputableNode[] = new Array();\n\n    while (true) {\n      let val = this.expr(false, VariableScope.global);\n      // make sure the element is computable\n      if (isComputableNode(val)) {\n        // everything else is good, push element into row\n        arr.push(val);\n        // if row hasn't reached end, consume 'comma' separator\n        if (\n          this.current_token.type != TokenType.semicolon &&\n          this.current_token.type != endToken\n        ) {\n          if (this.current_token.type == TokenType.comma) {\n            this.eat(TokenType.comma, \"parsing matrix row: \");\n          }\n        } else {\n          break;\n        }\n      } else {\n        throw new MatrixError(\n          \"matrix parsing error: expected a numeric element\"\n        );\n      }\n    }\n\n    return arr;\n  }\n\n  /**\n   * consume token and advance to next token\n   * @param type token type to verify\n   */\n  private eat(type: TokenType, message?: string) {\n    if (this.current_token.type == type) {\n      // if expected token type and current token type matches, proceed to next token\n      this.current_token = this.lexer.next_token();\n    } else {\n      // if token type does not match, a syntax error has happened\n      throw new SyntaxError(\n        message ||\n          \"\" +\n            \"expected \" +\n            type.toString() +\n            \", but got \" +\n            this.current_token.type.toString()\n      );\n    }\n  }\n\n  /**\n   * variable : id\n   */\n  private variable(scope: VariableScope = VariableScope.global): VariableNode {\n    if (isSymbolToken(this.current_token)) {\n      let node = new VariableNode(this.current_token, scope);\n      this.eat(TokenType.id);\n      return node;\n    }\n    throw new SymbolError(\"couldn't parse variable name\");\n  }\n\n  /**\n   * program : compound eof\n   */\n  private program(): AST {\n    let node = this.compound(VariableScope.global);\n    this.eat(TokenType.eof);\n    return node;\n  }\n\n  /**\n   * compound: statement_list\n   */\n  private compound(scope: VariableScope): CompoundNode {\n    return new CompoundNode(this.statement_list(scope));\n  }\n\n  private ignoreNewLines() {\n    // ignore all end lines\n    while (this.current_token.type === TokenType.endl) {\n      this.eat(TokenType.endl);\n    }\n  }\n\n  /**\n   * statement_list : statement | statement endl statement_list\n   */\n  private statement_list(scope: VariableScope): AST[] {\n    this.ignoreNewLines();\n    let results = this.statement(scope);\n    while (this.current_token.type == TokenType.endl) {\n      this.ignoreNewLines();\n      results = results.concat(this.statement(scope));\n    }\n\n    if (this.current_token.type == TokenType.id) {\n      throw new SyntaxError(\"unexpected identifier\");\n    }\n\n    return results;\n  }\n\n  /**\n   * statement : id_statement | expr\n   */\n  private statement(scope: VariableScope = VariableScope.global): AST[] {\n    if (this.current_token.type == TokenType.id) {\n      return this.id_statement(scope);\n    } else if (this.current_token.type == TokenType.reserved) {\n      return this.reserved_statement();\n    } else if (this.current_token.type != TokenType.eof) {\n      return [this.expr(true, scope)];\n    } else {\n      return [];\n    }\n  }\n\n  private reserved_statement(): AST[] {\n    let token = this.current_token;\n    throw new ParsingError(\"unexpected reserve word\");\n  }\n\n  /**\n   * create a user defined procedure\n   * @param proc\n   */\n  private procedure_definition(\n    proc: ProcedureCallNode,\n    currentScope: VariableScope\n  ): ProcedureDefinitionNode {\n    if (currentScope == VariableScope.procedure) {\n      throw new ParsingError(\"nested functions aren't supported!\");\n    }\n    this.eat(this.current_token.type);\n    // make sure all of the parameters are variables\n    let args = proc.args;\n    if (VariableNode.isVariableArray(args)) {\n      // change scope of variables\n      for (let arg of args) {\n        arg.scope = VariableScope.procedure;\n      }\n      // load expressions\n      if (this.current_token.type == TokenType.lbrace) {\n        // multi line statements\n        this.eat(TokenType.lbrace);\n        // @ts-ignore ignore the stupid if check since current_token changes in this.eat()\n\n        let exprs = this.compound(VariableScope.procedure);\n        this.eat(TokenType.rbrace);\n        return new ProcedureDefinitionNode(proc.name, args, exprs);\n      } else {\n        // single line expression\n        let expr = this.expr(true, VariableScope.procedure);\n        return new ProcedureDefinitionNode(\n          proc.name,\n          args,\n          new CompoundNode([expr])\n        );\n      }\n    } else {\n      throw new ParsingError(\n        \"cannot define a function with non-variable parameters\"\n      );\n    }\n  }\n\n  /**\n   * id_statement : assignemnt | procedure | expr\n   */\n  private id_statement(scope: VariableScope): AST[] {\n    let token = this.current_token;\n    if (token.type == TokenType.id) {\n      if (this.lexer.peekToken().type == TokenType.assign) {\n        return this.assignment(scope);\n      } else {\n        return [this.expr(true, scope)];\n      }\n    }\n\n    throw new ParsingError(\"couldn't find an identifier!\");\n  }\n\n  /**\n   * assignment : (variable = expr) (,variable = expr)*\n   */\n  private assignment(scope: VariableScope): AssignNode[] {\n    let left = this.variable(scope);\n    let token = this.current_token;\n    this.eat(TokenType.assign, \"parsing assignment: \");\n    let right = this.expr(true, scope);\n    let assignments = [new AssignNode(left, token, right)];\n    //  check if multiline assignment\n    if (this.current_token.type == TokenType.comma) {\n      this.eat(TokenType.comma);\n      let next = this.assignment(scope);\n      assignments = assignments.concat(next);\n    }\n    return assignments;\n  }\n\n  /**\n   * procedure : id lparen (expr,)* rparen\n   */\n  private procedure(scope: VariableScope): ProcedureCallNode {\n    let token = this.current_token;\n    if (!isSymbolToken(token)) {\n      throw new SymbolError(\"expected an identifier symbol but didn't get it!\");\n    }\n    this.eat(TokenType.id);\n    this.eat(TokenType.lparen);\n    let args = [];\n    while (this.current_token.type != TokenType.rparen) {\n      args.push(this.expr(true, scope));\n      if (this.current_token.type == TokenType.comma) {\n        this.eat(TokenType.comma);\n      } else {\n        break;\n      }\n    }\n    this.eat(TokenType.rparen);\n    return new ProcedureCallNode(token, args);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}