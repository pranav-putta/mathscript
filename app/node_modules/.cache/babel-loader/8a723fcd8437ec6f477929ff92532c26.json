{"ast":null,"code":"import { executeFunction, global_scope } from \"./global\";\nimport { Numeric, UnevaluatedMatrix, isComputable, computeResult } from \"./computable\";\nimport { ParsingError, SymbolError, UndeclaredVariableError } from \"./errors\";\nimport { TokenType } from \"./token\";\n/**\n * abstract syntax tree base class\n */\n\nexport class AbstractSyntaxTree {}\n/**\n * compound statements go here\n */\n\nexport class CompoundNode extends AbstractSyntaxTree {\n  constructor(nodes = []) {\n    super();\n    this.children = void 0;\n    this.children = nodes;\n  }\n\n  eval() {\n    let results = [];\n\n    for (let child of this.children) {\n      try {\n        let val = child.eval();\n        results.push(val);\n      } catch (exception) {\n        results.push(exception.message);\n      }\n    }\n\n    return results;\n  }\n\n}\n/**\n * assigns a variable to its value\n */\n\nexport class AssignNode extends AbstractSyntaxTree {\n  constructor(left, token, right) {\n    super();\n    this.left = void 0;\n    this.right = void 0;\n    this.left = left;\n    this.right = right;\n  }\n\n  eval() {\n    let name = this.left.value;\n    let val = this.right.eval();\n    global_scope[name] = val;\n    return `${name} = ${global_scope[name]}`;\n  }\n\n}\n/**\n * computes a procedure\n */\n\nexport class ProcedureNode extends AbstractSyntaxTree {\n  constructor(token, args) {\n    super();\n    this.name = void 0;\n    this.args = void 0;\n    this.name = token.value;\n    this.args = args;\n  }\n\n  eval() {\n    let result = executeFunction(this.name, this.args);\n    return result;\n  }\n\n}\n/**\n * empty node, doesn't do anything\n */\n\nexport class EmptyNode extends AbstractSyntaxTree {\n  eval() {\n    return;\n  }\n\n}\n/**\n * node that returns a computable value when evaluated\n */\n\nexport class ComputableNode extends AbstractSyntaxTree {}\n/**\n * binary operator node\n * takes a (left, operator, right)\n */\n\nexport class BinaryOperatorNode extends ComputableNode {\n  /**\n   * left node in binary operation\n   */\n\n  /**\n   * right node in binary operation\n   */\n\n  /**\n   * operator\n   */\n  constructor(left, operator, right) {\n    super();\n    this.left = void 0;\n    this.right = void 0;\n    this.operator = void 0;\n    this.left = left;\n    this.right = right;\n    this.operator = operator;\n  }\n\n  eval() {\n    let l = this.left.eval();\n    let r = this.right.eval();\n\n    if (isComputable(l) && isComputable(r)) {\n      return computeResult(l, r, this.operator.type).result;\n    }\n\n    throw new ParsingError(`cannot operate on two non-computable values: ${l} and ${r}`);\n  }\n\n}\nvar VariableScope;\n/**\n * holds a variable and its value\n */\n\n(function (VariableScope) {\n  VariableScope[VariableScope[\"global\"] = 0] = \"global\";\n  VariableScope[VariableScope[\"procedure\"] = 1] = \"procedure\";\n})(VariableScope || (VariableScope = {}));\n\nexport class VariableNode extends ComputableNode {\n  get value() {\n    return this._value;\n  }\n\n  get scope() {\n    return this._scope;\n  }\n\n  set scope(newScope) {\n    this._scope = newScope;\n  }\n\n  constructor(token, scope) {\n    super();\n    this._value = void 0;\n    this._scope = void 0;\n    this._value = token.value;\n    this._scope = scope;\n  }\n\n  eval() {\n    let name = this.value;\n    let val = global_scope[name];\n\n    if (val) {\n      console.log(`${name} = ${val}`);\n      return val;\n    } else {\n      throw new UndeclaredVariableError(`${name} was not declared!`);\n    }\n  }\n\n}\n/**\n * stores a single value: number or matrix\n */\n\nexport class SingleValueNode extends ComputableNode {\n  constructor(value) {\n    super();\n    this.value = void 0;\n    this.value = value;\n  }\n\n  eval() {\n    // evaluate unevaluated matrix if not done already\n    if (UnevaluatedMatrix.isUnevaluatedMatrix(this.value)) {\n      this.value = this.value.evaluate();\n    }\n\n    return this.value;\n  }\n\n}\n/**\n * holds a unary operator\n */\n\nexport class UnaryOperatorNode extends ComputableNode {\n  constructor(token, next) {\n    super();\n    this.token = void 0;\n    this.next = void 0;\n    this.token = token;\n    this.next = next;\n  }\n\n  eval() {\n    if (this.token.type == TokenType.plus) {\n      return this.next.eval();\n    } else if (this.token.type == TokenType.minus) {\n      return this.next.eval().mul(new Numeric(-1)).result;\n    } else {\n      throw new SymbolError(\"unexpected unary operator: \" + this.token.type.toString());\n    }\n  }\n\n}\nexport function isComputableNode(node) {\n  return node instanceof ComputableNode;\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/app/src/interpreter/ast.ts"],"names":["executeFunction","global_scope","Numeric","UnevaluatedMatrix","isComputable","computeResult","ParsingError","SymbolError","UndeclaredVariableError","TokenType","AbstractSyntaxTree","CompoundNode","constructor","nodes","children","eval","results","child","val","push","exception","message","AssignNode","left","token","right","name","value","ProcedureNode","args","result","EmptyNode","ComputableNode","BinaryOperatorNode","operator","l","r","type","VariableScope","VariableNode","_value","scope","_scope","newScope","console","log","SingleValueNode","isUnevaluatedMatrix","evaluate","UnaryOperatorNode","next","plus","minus","mul","toString","isComputableNode","node"],"mappings":"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","sourcesContent":["import { executeFunction, global_functions, global_scope } from \"./global\";\nimport {\n  Computable,\n  Numeric,\n  UnevaluatedMatrix,\n  isComputable,\n  computeResult,\n} from \"./computable\";\nimport { ParsingError, SymbolError, UndeclaredVariableError } from \"./errors\";\nimport { SymbolToken, Token, TokenType } from \"./token\";\n\n/**\n * abstract syntax tree base class\n */\nexport abstract class AbstractSyntaxTree {\n  /**\n   * abstract evaluate method. visits all nodes in postorder traversal\n   */\n  abstract eval(): any;\n}\n\n/**\n * compound statements go here\n */\nexport class CompoundNode extends AbstractSyntaxTree {\n  children: AST[];\n\n  constructor(nodes: AST[] = []) {\n    super();\n    this.children = nodes;\n  }\n\n  eval() {\n    let results = [];\n    for (let child of this.children) {\n      try {\n        let val = child.eval();\n        results.push(val);\n      } catch (exception) {\n        results.push(exception.message);\n      }\n    }\n    return results;\n  }\n}\n\n/**\n * assigns a variable to its value\n */\nexport class AssignNode extends AbstractSyntaxTree {\n  private left: VariableNode;\n  private right: AST;\n\n  constructor(left: VariableNode, token: Token, right: AST) {\n    super();\n    this.left = left;\n    this.right = right;\n  }\n  eval() {\n    let name = this.left.value;\n    let val = this.right.eval();\n    global_scope[name] = val;\n    return `${name} = ${global_scope[name]}`;\n  }\n}\n\n/**\n * computes a procedure\n */\nexport class ProcedureNode extends AbstractSyntaxTree {\n  private name: string;\n  private args: AST[];\n\n  constructor(token: SymbolToken, args: AST[]) {\n    super();\n    this.name = token.value;\n    this.args = args;\n  }\n\n  eval() {\n    let result = executeFunction(this.name, this.args);\n    return result;\n  }\n}\n\n/**\n * empty node, doesn't do anything\n */\nexport class EmptyNode extends AbstractSyntaxTree {\n  eval() {\n    return;\n  }\n}\n/**\n * node that returns a computable value when evaluated\n */\nexport abstract class ComputableNode extends AbstractSyntaxTree {\n  abstract eval(): Computable;\n}\n\n/**\n * binary operator node\n * takes a (left, operator, right)\n */\nexport class BinaryOperatorNode extends ComputableNode {\n  /**\n   * left node in binary operation\n   */\n  private left: AST;\n  /**\n   * right node in binary operation\n   */\n  private right: AST;\n  /**\n   * operator\n   */\n  private operator: Token;\n\n  constructor(left: AST, operator: Token, right: AST) {\n    super();\n    this.left = left;\n    this.right = right;\n    this.operator = operator;\n  }\n\n  public eval(): Computable {\n    let l = this.left.eval();\n    let r = this.right.eval();\n\n    if (isComputable(l) && isComputable(r)) {\n      return computeResult(l, r, this.operator.type).result;\n    }\n\n    throw new ParsingError(\n      `cannot operate on two non-computable values: ${l} and ${r}`\n    );\n  }\n}\n\nenum VariableScope {\n  global,\n  procedure,\n}\n/**\n * holds a variable and its value\n */\nexport class VariableNode extends ComputableNode {\n  private _value: string;\n  private _scope: VariableScope;\n\n  public get value(): string {\n    return this._value;\n  }\n\n  public get scope(): VariableScope {\n    return this._scope;\n  }\n\n  public set scope(newScope: VariableScope) {\n    this._scope = newScope;\n  }\n\n  constructor(token: SymbolToken, scope: VariableScope) {\n    super();\n    this._value = token.value;\n    this._scope = scope;\n  }\n  eval(): Computable {\n    let name = this.value;\n    let val = global_scope[name];\n    if (val) {\n      console.log(`${name} = ${val}`);\n      return val;\n    } else {\n      throw new UndeclaredVariableError(`${name} was not declared!`);\n    }\n  }\n}\n\n/**\n * stores a single value: number or matrix\n */\nexport class SingleValueNode extends ComputableNode {\n  private value: Computable | UnevaluatedMatrix;\n\n  constructor(value: Computable | UnevaluatedMatrix) {\n    super();\n    this.value = value;\n  }\n\n  public eval(): Computable {\n    // evaluate unevaluated matrix if not done already\n    if (UnevaluatedMatrix.isUnevaluatedMatrix(this.value)) {\n      this.value = this.value.evaluate();\n    }\n\n    return this.value;\n  }\n}\n\n/**\n * holds a unary operator\n */\nexport class UnaryOperatorNode extends ComputableNode {\n  private token: Token;\n  private next: ComputableNode;\n\n  constructor(token: Token, next: ComputableNode) {\n    super();\n    this.token = token;\n    this.next = next;\n  }\n\n  public eval(): Computable {\n    if (this.token.type == TokenType.plus) {\n      return this.next.eval();\n    } else if (this.token.type == TokenType.minus) {\n      return this.next.eval().mul(new Numeric(-1)).result;\n    } else {\n      throw new SymbolError(\n        \"unexpected unary operator: \" + this.token.type.toString()\n      );\n    }\n  }\n}\n\nexport function isComputableNode(node: AST): node is ComputableNode {\n  return node instanceof ComputableNode;\n}\n\nexport type AST = AbstractSyntaxTree;\nexport type CN = ComputableNode;\nexport type BinOp = BinaryOperatorNode;\nexport type SVN = SingleValueNode;\nexport type UnaryOp = UnaryOperatorNode;\n"]},"metadata":{},"sourceType":"module"}