{"ast":null,"code":"import { createUserDefinedFunction, executeFunction, global_scope } from \"./global\";\nimport { Numeric, UnevaluatedMatrix, isComputable, computeResult } from \"./computable\";\nimport { ParsingError, SymbolError, UndeclaredVariableError } from \"./errors\";\nimport { TokenType } from \"./token\";\n/**\n * abstract syntax tree base class\n */\n\nexport class AbstractSyntaxTree {}\n/**\n * compound statements go here\n */\n\nexport class CompoundNode extends AbstractSyntaxTree {\n  constructor(nodes = []) {\n    super();\n    this.children = void 0;\n    this.children = nodes;\n  }\n\n  eval() {\n    let results = [];\n\n    for (let child of this.children) {\n      try {\n        let val = child.eval();\n        results.push(val);\n      } catch (exception) {\n        results.push(exception.message);\n      }\n    }\n\n    return results;\n  }\n\n}\n/**\n * assigns a variable to its value\n */\n\nexport class AssignNode extends AbstractSyntaxTree {\n  constructor(left, token, right) {\n    super();\n    this.left = void 0;\n    this.right = void 0;\n    this.left = left;\n    this.right = right;\n  }\n\n  eval() {\n    let name = this.left.value;\n    let val = this.right.eval();\n    global_scope[name] = val;\n    return `${name} = ${global_scope[name]}`;\n  }\n\n}\n/**\n * computes a procedure\n */\n\nexport class ProcedureCallNode extends AbstractSyntaxTree {\n  get args() {\n    return this._args;\n  }\n\n  constructor(token, args) {\n    super();\n    this.name = void 0;\n    this._args = void 0;\n    this.name = token.value;\n    this._args = args;\n  }\n\n  eval() {\n    let result = executeFunction(this.name, this.args);\n    return result;\n  }\n\n}\nexport class ProcedureDefinitionNode extends AbstractSyntaxTree {\n  constructor(name, args, exprs) {\n    super();\n    this._name = void 0;\n    this._args = void 0;\n    this._exprs = void 0;\n    this._name = name;\n    this._args = args;\n    this._exprs = exprs;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get args() {\n    return this._args;\n  }\n\n  get exprs() {\n    return this._exprs;\n  }\n\n  eval() {\n    createUserDefinedFunction(this);\n  }\n\n}\n/**\n * empty node, doesn't do anything\n */\n\nexport class EmptyNode extends AbstractSyntaxTree {\n  eval() {\n    return;\n  }\n\n}\n/**\n * node that returns a computable value when evaluated\n */\n\nexport class ComputableNode extends AbstractSyntaxTree {}\n/**\n * binary operator node\n * takes a (left, operator, right)\n */\n\nexport class BinaryOperatorNode extends ComputableNode {\n  /**\n   * left node in binary operation\n   */\n\n  /**\n   * right node in binary operation\n   */\n\n  /**\n   * operator\n   */\n  constructor(left, operator, right) {\n    super();\n    this.left = void 0;\n    this.right = void 0;\n    this.operator = void 0;\n    this.left = left;\n    this.right = right;\n    this.operator = operator;\n  }\n\n  eval() {\n    let l = this.left.eval();\n    let r = this.right.eval();\n\n    if (isComputable(l) && isComputable(r)) {\n      return computeResult(l, r, this.operator.type).result;\n    }\n\n    throw new ParsingError(`cannot operate on two non-computable values: ${l} and ${r}`);\n  }\n\n}\nexport let VariableScope;\n/**\n * holds a variable and its value\n */\n\n(function (VariableScope) {\n  VariableScope[VariableScope[\"global\"] = 0] = \"global\";\n  VariableScope[VariableScope[\"procedure\"] = 1] = \"procedure\";\n})(VariableScope || (VariableScope = {}));\n\nexport class VariableNode extends ComputableNode {\n  get value() {\n    return this._value;\n  }\n\n  get scope() {\n    return this._scope;\n  }\n\n  set scope(newScope) {\n    this._scope = newScope;\n  }\n\n  constructor(token, scope) {\n    super();\n    this._value = void 0;\n    this._scope = void 0;\n    this._value = token.value;\n    this._scope = scope;\n  }\n\n  eval() {\n    let name = this.value;\n    let val = global_scope[name];\n\n    if (val) {\n      console.log(`${name} = ${val}`);\n      return val;\n    } else {\n      throw new UndeclaredVariableError(`${name} was not declared!`);\n    }\n  }\n  /**\n   * check if an array of nodes is a list of variables\n   * @param arr list of tree nodes\n   */\n\n\n  static isVariableArray(arr) {\n    for (let arg of arr) {\n      if (!(arg instanceof VariableNode)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n/**\n * stores a single value: number or matrix\n */\n\nexport class SingleValueNode extends ComputableNode {\n  constructor(value) {\n    super();\n    this.value = void 0;\n    this.value = value;\n  }\n\n  eval() {\n    // evaluate unevaluated matrix if not done already\n    if (UnevaluatedMatrix.isUnevaluatedMatrix(this.value)) {\n      this.value = this.value.evaluate();\n    }\n\n    return this.value;\n  }\n\n}\n/**\n * holds a unary operator\n */\n\nexport class UnaryOperatorNode extends ComputableNode {\n  constructor(token, next) {\n    super();\n    this.token = void 0;\n    this.next = void 0;\n    this.token = token;\n    this.next = next;\n  }\n\n  eval() {\n    if (this.token.type == TokenType.plus) {\n      return this.next.eval();\n    } else if (this.token.type == TokenType.minus) {\n      return this.next.eval().mul(new Numeric(-1)).result;\n    } else {\n      throw new SymbolError(\"unexpected unary operator: \" + this.token.type.toString());\n    }\n  }\n\n}\nexport function isComputableNode(node) {\n  return node instanceof ComputableNode;\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/app/src/interpreter/ast.ts"],"names":["createUserDefinedFunction","executeFunction","global_scope","Numeric","UnevaluatedMatrix","isComputable","computeResult","ParsingError","SymbolError","UndeclaredVariableError","TokenType","AbstractSyntaxTree","CompoundNode","constructor","nodes","children","eval","results","child","val","push","exception","message","AssignNode","left","token","right","name","value","ProcedureCallNode","args","_args","result","ProcedureDefinitionNode","exprs","_name","_exprs","EmptyNode","ComputableNode","BinaryOperatorNode","operator","l","r","type","VariableScope","VariableNode","_value","scope","_scope","newScope","console","log","isVariableArray","arr","arg","SingleValueNode","isUnevaluatedMatrix","evaluate","UnaryOperatorNode","next","plus","minus","mul","toString","isComputableNode","node"],"mappings":"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","sourcesContent":["import {\n  createUserDefinedFunction,\n  executeFunction,\n  global_functions,\n  global_scope,\n} from \"./global\";\nimport {\n  Computable,\n  Numeric,\n  UnevaluatedMatrix,\n  isComputable,\n  computeResult,\n} from \"./computable\";\nimport { ParsingError, SymbolError, UndeclaredVariableError } from \"./errors\";\nimport { SymbolToken, Token, TokenType } from \"./token\";\n\n/**\n * abstract syntax tree base class\n */\nexport abstract class AbstractSyntaxTree {\n  /**\n   * abstract evaluate method. visits all nodes in postorder traversal\n   */\n  abstract eval(): any;\n}\n\n/**\n * compound statements go here\n */\nexport class CompoundNode extends AbstractSyntaxTree {\n  children: AST[];\n\n  constructor(nodes: AST[] = []) {\n    super();\n    this.children = nodes;\n  }\n\n  eval() {\n    let results = [];\n    for (let child of this.children) {\n      try {\n        let val = child.eval();\n        results.push(val);\n      } catch (exception) {\n        results.push(exception.message);\n      }\n    }\n    return results;\n  }\n}\n\n/**\n * assigns a variable to its value\n */\nexport class AssignNode extends AbstractSyntaxTree {\n  private left: VariableNode;\n  private right: AST;\n\n  constructor(left: VariableNode, token: Token, right: AST) {\n    super();\n    this.left = left;\n    this.right = right;\n  }\n  eval() {\n    let name = this.left.value;\n    let val = this.right.eval();\n    global_scope[name] = val;\n    return `${name} = ${global_scope[name]}`;\n  }\n}\n\n/**\n * computes a procedure\n */\nexport class ProcedureCallNode extends AbstractSyntaxTree {\n  private name: string;\n  private _args: AST[];\n\n  public get args(): AST[] {\n    return this._args;\n  }\n\n  constructor(token: SymbolToken, args: AST[]) {\n    super();\n    this.name = token.value;\n    this._args = args;\n  }\n\n  eval() {\n    let result = executeFunction(this.name, this.args);\n    return result;\n  }\n}\n\nexport class ProcedureDefinitionNode extends AbstractSyntaxTree {\n  private _name: string;\n  private _args: VariableNode[];\n  private _exprs: AST[];\n\n  constructor(name: string, args: VariableNode[], exprs: AST[]) {\n    super();\n    this._name = name;\n    this._args = args;\n    this._exprs = exprs;\n  }\n\n  public get name() {\n    return this._name;\n  }\n\n  public get args() {\n    return this._args;\n  }\n\n  public get exprs() {\n    return this._exprs;\n  }\n\n  eval(): void {\n    createUserDefinedFunction(this);\n  }\n}\n\n/**\n * empty node, doesn't do anything\n */\nexport class EmptyNode extends AbstractSyntaxTree {\n  eval() {\n    return;\n  }\n}\n/**\n * node that returns a computable value when evaluated\n */\nexport abstract class ComputableNode extends AbstractSyntaxTree {\n  abstract eval(): Computable;\n}\n\n/**\n * binary operator node\n * takes a (left, operator, right)\n */\nexport class BinaryOperatorNode extends ComputableNode {\n  /**\n   * left node in binary operation\n   */\n  private left: AST;\n  /**\n   * right node in binary operation\n   */\n  private right: AST;\n  /**\n   * operator\n   */\n  private operator: Token;\n\n  constructor(left: AST, operator: Token, right: AST) {\n    super();\n    this.left = left;\n    this.right = right;\n    this.operator = operator;\n  }\n\n  public eval(): Computable {\n    let l = this.left.eval();\n    let r = this.right.eval();\n\n    if (isComputable(l) && isComputable(r)) {\n      return computeResult(l, r, this.operator.type).result;\n    }\n\n    throw new ParsingError(\n      `cannot operate on two non-computable values: ${l} and ${r}`\n    );\n  }\n}\n\nexport enum VariableScope {\n  global,\n  procedure,\n}\n/**\n * holds a variable and its value\n */\nexport class VariableNode extends ComputableNode {\n  private _value: string;\n  private _scope: VariableScope;\n\n  public get value(): string {\n    return this._value;\n  }\n\n  public get scope(): VariableScope {\n    return this._scope;\n  }\n\n  public set scope(newScope: VariableScope) {\n    this._scope = newScope;\n  }\n\n  constructor(token: SymbolToken, scope: VariableScope) {\n    super();\n    this._value = token.value;\n    this._scope = scope;\n  }\n  eval(): Computable {\n    let name = this.value;\n    let val = global_scope[name];\n    if (val) {\n      console.log(`${name} = ${val}`);\n      return val;\n    } else {\n      throw new UndeclaredVariableError(`${name} was not declared!`);\n    }\n  }\n\n  /**\n   * check if an array of nodes is a list of variables\n   * @param arr list of tree nodes\n   */\n  static isVariableArray(arr: AST[]): arr is VariableNode[] {\n    for (let arg of arr) {\n      if (!(arg instanceof VariableNode)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * stores a single value: number or matrix\n */\nexport class SingleValueNode extends ComputableNode {\n  private value: Computable | UnevaluatedMatrix;\n\n  constructor(value: Computable | UnevaluatedMatrix) {\n    super();\n    this.value = value;\n  }\n\n  public eval(): Computable {\n    // evaluate unevaluated matrix if not done already\n    if (UnevaluatedMatrix.isUnevaluatedMatrix(this.value)) {\n      this.value = this.value.evaluate();\n    }\n\n    return this.value;\n  }\n}\n\n/**\n * holds a unary operator\n */\nexport class UnaryOperatorNode extends ComputableNode {\n  private token: Token;\n  private next: ComputableNode;\n\n  constructor(token: Token, next: ComputableNode) {\n    super();\n    this.token = token;\n    this.next = next;\n  }\n\n  public eval(): Computable {\n    if (this.token.type == TokenType.plus) {\n      return this.next.eval();\n    } else if (this.token.type == TokenType.minus) {\n      return this.next.eval().mul(new Numeric(-1)).result;\n    } else {\n      throw new SymbolError(\n        \"unexpected unary operator: \" + this.token.type.toString()\n      );\n    }\n  }\n}\n\nexport function isComputableNode(node: AST): node is ComputableNode {\n  return node instanceof ComputableNode;\n}\n\nexport type AST = AbstractSyntaxTree;\nexport type CN = ComputableNode;\nexport type BinOp = BinaryOperatorNode;\nexport type SVN = SingleValueNode;\nexport type UnaryOp = UnaryOperatorNode;\n"]},"metadata":{},"sourceType":"module"}