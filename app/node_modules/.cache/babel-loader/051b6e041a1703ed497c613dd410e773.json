{"ast":null,"code":"import { rref, transpose, det, sqrt, identity } from \"./lib\";\nexport let global_scope = {};\nexport let global_functions = {\n  rref: rref,\n  trans: transpose,\n  transpose: transpose,\n  det: det,\n  determinant: det,\n  q: sqrt,\n  sqrt: sqrt,\n  identity: identity\n};\nexport function executeFunction(f, args) {\n  let func = global_functions[f];\n  let params = [];\n\n  for (let arg of args) {\n    params.push(arg.eval());\n  }\n\n  return func.apply(null, params);\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/app/src/interpreter/global.ts"],"names":["rref","transpose","det","sqrt","identity","global_scope","global_functions","trans","determinant","q","executeFunction","f","args","func","params","arg","push","eval","apply"],"mappings":"AAEA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,QAArC,QAAqD,OAArD;AAWA,OAAO,IAAIC,YAA6B,GAAG,EAApC;AACP,OAAO,IAAIC,gBAAkC,GAAG;AAC9CN,EAAAA,IAAI,EAAEA,IADwC;AAE9CO,EAAAA,KAAK,EAAEN,SAFuC;AAG9CA,EAAAA,SAAS,EAAEA,SAHmC;AAI9CC,EAAAA,GAAG,EAAEA,GAJyC;AAK9CM,EAAAA,WAAW,EAAEN,GALiC;AAM9CO,EAAAA,CAAC,EAAEN,IAN2C;AAO9CA,EAAAA,IAAI,EAAEA,IAPwC;AAQ9CC,EAAAA,QAAQ,EAAEA;AARoC,CAAzC;AAWP,OAAO,SAASM,eAAT,CAAyBC,CAAzB,EAAoCC,IAApC,EAAiD;AACtD,MAAIC,IAAI,GAAGP,gBAAgB,CAACK,CAAD,CAA3B;AAEA,MAAIG,MAAoB,GAAG,EAA3B;;AACA,OAAK,IAAIC,GAAT,IAAgBH,IAAhB,EAAsB;AACpBE,IAAAA,MAAM,CAACE,IAAP,CAAYD,GAAG,CAACE,IAAJ,EAAZ;AACD;;AACD,SAAOJ,IAAI,CAACK,KAAL,CAAW,IAAX,EAAiBJ,MAAjB,CAAP;AACD","sourcesContent":["import { AST } from \"./ast\";\nimport { Computable } from \"./computable\";\nimport { rref, transpose, det, sqrt, identity } from \"./lib\";\n\ntype Function = (...args: any[]) => any;\n\ninterface GlobalVariables {\n  [key: string]: any;\n}\ninterface GlobalProcedures {\n  [key: string]: Function;\n}\n\nexport let global_scope: GlobalVariables = {};\nexport let global_functions: GlobalProcedures = {\n  rref: rref,\n  trans: transpose,\n  transpose: transpose,\n  det: det,\n  determinant: det,\n  q: sqrt,\n  sqrt: sqrt,\n  identity: identity,\n};\n\nexport function executeFunction(f: string, args: AST[]) {\n  let func = global_functions[f];\n\n  let params: Computable[] = [];\n  for (let arg of args) {\n    params.push(arg.eval());\n  }\n  return func.apply(null, params);\n}\n"]},"metadata":{},"sourceType":"module"}