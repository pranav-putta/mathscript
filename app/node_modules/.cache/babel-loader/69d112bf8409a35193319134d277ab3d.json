{"ast":null,"code":"import { ArithmeticError } from \"../errors\";\nimport { TokenType } from \"../token\";\nimport { Matrix } from \"./matrix\";\nimport { Numeric } from \"./numeric\";\nimport { Logical } from \"./logical\";\nexport class Computable {\n  isMatrix() {\n    return this instanceof Matrix;\n  }\n\n  isNumeric() {\n    return this instanceof Numeric;\n  }\n\n  isLogical() {\n    return this instanceof Logical;\n  }\n  /**\n   * checks if given element is of type computable\n   * @param el any element\n   */\n\n\n  static isComputable(el) {\n    return el instanceof Computable;\n  }\n\n  static isMatrix(el) {\n    return el instanceof Matrix;\n  }\n\n  static isNumeric(el) {\n    return el instanceof Numeric;\n  }\n\n  static isLogical(el) {\n    return el instanceof Logical;\n  }\n\n  static compute(a, b, operator) {\n    switch (operator) {\n      case TokenType.plus:\n        return a.add(b);\n\n      case TokenType.minus:\n        return a.sub(b);\n\n      case TokenType.mul:\n        return a.mul(b);\n\n      case TokenType.div:\n        return a.div(b);\n\n      case TokenType.rdiv:\n        return a.rdiv(b);\n\n      default:\n        throw new ArithmeticError(\"unsupported operation: \" + operator);\n    }\n  }\n\n}\nexport { Matrix, Numeric, Logical };","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/computable/computable.ts"],"names":["ArithmeticError","TokenType","Matrix","Numeric","Logical","Computable","isMatrix","isNumeric","isLogical","isComputable","el","compute","a","b","operator","plus","add","minus","sub","mul","div","rdiv"],"mappings":"AAAA,SAASA,eAAT,QAAgC,WAAhC;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAeA,OAAO,MAAeC,UAAf,CAA0B;AAQxBC,EAAAA,QAAP,GAAkC;AAChC,WAAO,gBAAgBJ,MAAvB;AACD;;AAEMK,EAAAA,SAAP,GAAoC;AAClC,WAAO,gBAAgBJ,OAAvB;AACD;;AAEMK,EAAAA,SAAP,GAAoC;AAClC,WAAO,gBAAgBJ,OAAvB;AACD;AAED;;;;;;AAIA,SAAcK,YAAd,CAA2BC,EAA3B,EAAsD;AACpD,WAAOA,EAAE,YAAYL,UAArB;AACD;;AAED,SAAcC,QAAd,CAAuBI,EAAvB,EAA8C;AAC5C,WAAOA,EAAE,YAAYR,MAArB;AACD;;AAED,SAAcK,SAAd,CAAwBG,EAAxB,EAAgD;AAC9C,WAAOA,EAAE,YAAYP,OAArB;AACD;;AAED,SAAcK,SAAd,CAAwBE,EAAxB,EAAgD;AAC9C,WAAOA,EAAE,YAAYN,OAArB;AACD;;AAED,SAAcO,OAAd,CACEC,CADF,EAEEC,CAFF,EAGEC,QAHF,EAIU;AACR,YAAQA,QAAR;AACE,WAAKb,SAAS,CAACc,IAAf;AACE,eAAOH,CAAC,CAACI,GAAF,CAAMH,CAAN,CAAP;;AACF,WAAKZ,SAAS,CAACgB,KAAf;AACE,eAAOL,CAAC,CAACM,GAAF,CAAML,CAAN,CAAP;;AACF,WAAKZ,SAAS,CAACkB,GAAf;AACE,eAAOP,CAAC,CAACO,GAAF,CAAMN,CAAN,CAAP;;AACF,WAAKZ,SAAS,CAACmB,GAAf;AACE,eAAOR,CAAC,CAACQ,GAAF,CAAMP,CAAN,CAAP;;AACF,WAAKZ,SAAS,CAACoB,IAAf;AACE,eAAOT,CAAC,CAACS,IAAF,CAAOR,CAAP,CAAP;;AACF;AACE,cAAM,IAAIb,eAAJ,CAAoB,4BAA4Bc,QAAhD,CAAN;AAZJ;AAcD;;AA3D8B;AA8DjC,SAASZ,MAAT,EAAiBC,OAAjB,EAA0BC,OAA1B","sourcesContent":["import { ArithmeticError } from \"../errors\";\nimport { TokenType } from \"../token\";\nimport { Matrix } from \"./matrix\";\nimport { Numeric } from \"./numeric\";\nimport { Logical } from \"./logical\";\n\nexport interface Result {\n  result: Computable;\n  message?: string;\n}\n\nexport interface MatrixResult extends Result {\n  result: Matrix;\n}\n\nexport interface LogicalResult extends Result {\n  result: Logical;\n}\n\nexport abstract class Computable {\n  public abstract add(other: Computable): Result;\n  public abstract sub(other: Computable): Result;\n  public abstract mul(other: Computable): Result;\n  public abstract div(other: Computable): Result;\n  public abstract rdiv(other: Computable): Result;\n  public abstract pow(other: Computable): Result;\n\n  public isMatrix(): this is Matrix {\n    return this instanceof Matrix;\n  }\n\n  public isNumeric(): this is Numeric {\n    return this instanceof Numeric;\n  }\n\n  public isLogical(): this is Logical {\n    return this instanceof Logical;\n  }\n\n  /**\n   * checks if given element is of type computable\n   * @param el any element\n   */\n  public static isComputable(el: any): el is Computable {\n    return el instanceof Computable;\n  }\n\n  public static isMatrix(el: any): el is Matrix {\n    return el instanceof Matrix;\n  }\n\n  public static isNumeric(el: any): el is Numeric {\n    return el instanceof Numeric;\n  }\n\n  public static isLogical(el: any): el is Logical {\n    return el instanceof Logical;\n  }\n\n  public static compute(\n    a: Computable,\n    b: Computable,\n    operator: TokenType\n  ): Result {\n    switch (operator) {\n      case TokenType.plus:\n        return a.add(b);\n      case TokenType.minus:\n        return a.sub(b);\n      case TokenType.mul:\n        return a.mul(b);\n      case TokenType.div:\n        return a.div(b);\n      case TokenType.rdiv:\n        return a.rdiv(b);\n      default:\n        throw new ArithmeticError(\"unsupported operation: \" + operator);\n    }\n  }\n}\n\nexport { Matrix, Numeric, Logical };\n"]},"metadata":{},"sourceType":"module"}