{"ast":null,"code":"import { Computable } from \".\";\nimport { ArithmeticError, MatrixError } from \"../errors\";\nimport { Numeric } from \"./numeric\";\nexport class UnevaluatedMatrix {\n  /**\n   * constructs a new matrix\n   * @param nodes optional: matrix as nodes if matrix unevaluated\n   * @param rows optional: matrix as numeric array if matrix evaluated\n   */\n  constructor(nodes) {\n    this.matrix = void 0;\n    this.dimR = void 0;\n    this.dimC = void 0;\n    // raw node matrix\n    this.matrix = nodes;\n    this.dimR = nodes.length;\n    this.dimC = this.dimR > 0 ? nodes[0].length : 0; // verify each row is the same length\n\n    for (let row of nodes) {\n      if (row.length != this.dimC) {\n        throw new MatrixError(\"row dimensions did not match\");\n      }\n    }\n  }\n  /**\n   * evaluates matrix from raw nodes\n   */\n\n\n  evaluate() {\n    let arr = new Array();\n\n    for (let row = 0; row < this.dimR; row++) {\n      arr.push([]);\n\n      for (let col = 0; col < this.dimC; col++) {\n        let val = this.matrix[row][col].eval();\n\n        if (Computable.isNumeric(val)) {\n          arr[row].push(val.value);\n        } else {\n          throw new SyntaxError(\"couldn't evaluate matrix! expected numbers.\");\n        }\n      }\n    }\n\n    return new Matrix(arr);\n  }\n\n  static isUnevaluatedMatrix(m) {\n    return m instanceof UnevaluatedMatrix;\n  }\n\n}\nexport class Matrix extends Computable {\n  /**\n   * constructs a new matrix\n   * @param nodes optional: matrix as nodes if matrix unevaluated\n   * @param rows optional: matrix as numeric array if matrix evaluated\n   */\n  constructor(rows) {\n    super();\n    this.matrix = void 0;\n    this.dimR = void 0;\n    this.dimC = void 0;\n    this.matrix = rows;\n    this.dimR = rows.length;\n    this.dimC = this.dimR > 0 ? rows[0].length : 0; // verify each row is the same length\n\n    for (let row of rows) {\n      if (row.length != this.dimC) {\n        throw new MatrixError(\"row dimensions did not match\");\n      }\n    }\n  }\n\n  checkDimensions(other) {\n    if (this.dimR != other.dimR || this.dimC != other.dimC) {\n      throw new MatrixError(`can't perform operations on matricies of different dimensions! (${this.dimR} x ${this.dimC}) and (${other.dimR} x ${other.dimC})`);\n    }\n  }\n\n  expectedMatrixError() {\n    throw new ArithmeticError(\"expected a matrix for calculations.\");\n  }\n\n  expectedMatrixOrNumericError() {\n    throw new ArithmeticError(\"expected a matrix or numeric for calculations.\");\n  }\n  /**\n   * add two matricies together by elementwise addition or add a constant to the matrix\n   * @param other a computable object\n   */\n\n\n  add(other) {\n    let arr = new Array();\n\n    if (other.isMatrix()) {\n      // add two matricies together\n      this.checkDimensions(other);\n\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] + other.matrix[i][j]);\n        }\n      }\n    } else if (Computable.isNumeric(other)) {\n      // add constant to each element\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] + other.value);\n        }\n      }\n    } else {\n      this.expectedMatrixOrNumericError();\n    }\n\n    return {\n      result: new Matrix(arr)\n    };\n  }\n  /**\n   * subtracts matrix from this, or subtracts constant from each element\n   * @param other any computable item\n   */\n\n\n  sub(other) {\n    let arr = new Array();\n\n    if (Computable.isMatrix(other)) {\n      // subtract two matricies together\n      this.checkDimensions(other);\n\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] - other.matrix[i][j]);\n        }\n      }\n    } else if (Computable.isNumeric(other)) {\n      // subtract constant to each element\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] - other.value);\n        }\n      }\n    } else {\n      this.expectedMatrixOrNumericError();\n    }\n\n    return {\n      result: new Matrix(arr)\n    };\n  }\n  /**\n   * element-wise multiplication\n   * @param other\n   */\n\n\n  el_mul(other) {\n    if (this.dimC == other.dimC && this.dimR == other.dimR) {\n      let arr = new Array();\n\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] * other.matrix[i][j]);\n        }\n      }\n\n      return {\n        result: new Matrix(arr)\n      };\n    } else {\n      throw new MatrixError(\"cannot do element-wise multiplication on different sized matricies\");\n    }\n  }\n  /**\n   * computes the matrix product or multiplies a matrix by a scalar\n   * @param other any computable item\n   */\n\n\n  mul(other) {\n    if (Computable.isMatrix(other)) {\n      // multiply two matricies\n      // check dimensions are proper\n      if (this.dimC != other.dimR) {\n        if (this.dimC == other.dimC && this.dimR == other.dimR) {\n          return {\n            result: this.mul(other.transpose().result).result,\n            message: \"inferred to take dot product.\"\n          };\n        }\n\n        throw new MatrixError(`can't multiply matricies of non-matching dimensions! (${this.dimR} x ${this.dimC}) and (${other.dimR} x ${other.dimC})`);\n      }\n\n      let newMatrix = new Array();\n\n      for (let i = 0; i < this.dimR; i++) {\n        newMatrix.push([]);\n\n        for (let j = 0; j < other.dimC; j++) {\n          let temp = 0;\n\n          for (let k = 0; k < this.dimC; k++) {\n            temp += this.matrix[i][k] * other.matrix[k][j];\n          }\n\n          newMatrix[i].push(temp);\n        }\n\n        if (newMatrix.length == 1 && newMatrix[0].length == 1) {\n          return {\n            result: new Numeric(newMatrix[0][0])\n          };\n        } else {\n          return {\n            result: new Matrix(newMatrix)\n          };\n        }\n      }\n    } else if (Computable.isNumeric(other)) {\n      let arr = new Array(); // multiply constant to each element\n\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] * other.value);\n        }\n      }\n\n      return {\n        result: new Matrix(arr)\n      };\n    }\n\n    this.expectedMatrixOrNumericError();\n  }\n  /**\n   * divide by a scalar, matrix division is not supported\n   * @param other\n   */\n\n\n  div(other) {\n    if (Computable.isNumeric(other)) {\n      let arr = new Array(); // multiply constant to each element\n\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] / other.value);\n        }\n      }\n\n      return {\n        result: new Matrix(arr)\n      };\n    }\n\n    this.expectedMatrixError();\n  }\n  /**\n   * divide by a scalar, matrix division is not supported\n   * @param other\n   */\n\n\n  rdiv(other) {\n    if (Computable.isNumeric(other)) {\n      let arr = new Array(); // multiply constant to each element\n\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(Math.floor(this.matrix[i][j] / other.value));\n        }\n      }\n\n      return {\n        result: new Matrix(arr)\n      };\n    }\n\n    this.expectedMatrixError();\n  }\n  /**\n   * take power\n   * @param other\n   */\n\n\n  pow(other) {\n    if (this.dimR != this.dimC) {\n      throw new MatrixError(\"only square matricies can be raised to the power\");\n    }\n\n    if (Computable.isNumeric(other)) {\n      let newMatrix = this;\n\n      for (let i = 0; i < other.value; i++) {\n        let tmp = newMatrix.mul(this).result;\n\n        if (Computable.isMatrix(tmp)) {\n          newMatrix = tmp;\n        } else {\n          throw new MatrixError(\"multiplication failed: \" + tmp);\n        }\n      }\n\n      return {\n        result: newMatrix\n      };\n    } else {\n      throw new MatrixError(\"matrix power is not supported\");\n    }\n  }\n\n  transpose(save = false) {\n    let arr = new Array();\n\n    for (let i = 0; i < this.dimC; i++) {\n      arr.push([]);\n\n      for (let j = 0; j < this.dimR; j++) {\n        arr[i].push(this.matrix[j][i]);\n      }\n    }\n\n    if (save) {\n      this.matrix = arr;\n      let tmp = this.dimR;\n      this.dimR = this.dimC;\n      this.dimC = tmp;\n      return {\n        result: this\n      };\n    }\n\n    return {\n      result: new Matrix(arr)\n    };\n  }\n\n  determinant() {\n    if (this.dimR != this.dimC) {\n      throw new MatrixError(\"cannot take determinant of non-square matrix\");\n    }\n\n    let n = this.dimR;\n    let M = this.matrix;\n\n    if (n == 2) {\n      return M[0][0] * M[1][1] - M[0][1] * M[1][0];\n    } else {\n      let d = 0;\n\n      for (let i = 0; i < n; i++) {\n        // create a sub matrix\n        let subMatrix = [];\n\n        for (let r = 0; r < n; r++) {\n          subMatrix.push([]);\n\n          for (let c = 0; c < n; c++) {\n            if (c != i) {\n              subMatrix[r].push(this.matrix[r][c]);\n            }\n          }\n        }\n\n        d += M[0][i] * new Matrix(subMatrix).determinant();\n      }\n\n      return d;\n    }\n  }\n\n  subMatrix(startRow, endRow = this.dimR - 1, startCol, endCol = this.dimC - 1) {\n    let arr = new Array();\n\n    for (let i = startRow; i <= endRow; i++) {\n      arr.push([]);\n\n      for (let j = startCol; j <= endCol; j++) {\n        arr[i].push(this.matrix[i][j]);\n      }\n    }\n\n    return new Matrix(arr);\n  }\n\n  toString() {\n    let m = this.matrix;\n    let str = \"\";\n\n    if (m.length == 1) {\n      str += \"< \";\n\n      for (let i = 0; i < this.dimC; i++) {\n        str += m[0][i];\n\n        if (i != m[0].length - 1) {\n          str += \" \";\n        }\n      }\n\n      str += \" >\";\n    } else {\n      str += \"[\";\n\n      for (let i = 0; i < this.dimR; i++) {\n        if (i != 0) {\n          str += \" \";\n        }\n\n        str += \"[ \";\n\n        for (let j = 0; j < this.dimC; j++) {\n          str += m[i][j] + \" \";\n        }\n\n        str += \"]\";\n\n        if (i != this.dimR - 1) {\n          str += \"\\n\";\n        }\n      }\n\n      str += \"]\";\n      str += `  { ${this.dimR} x ${this.dimC} }`;\n    }\n\n    return str;\n  }\n\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/computable/matrix.ts"],"names":["Computable","ArithmeticError","MatrixError","Numeric","UnevaluatedMatrix","constructor","nodes","matrix","dimR","dimC","length","row","evaluate","arr","Array","push","col","val","eval","isNumeric","value","SyntaxError","Matrix","isUnevaluatedMatrix","m","rows","checkDimensions","other","expectedMatrixError","expectedMatrixOrNumericError","add","isMatrix","i","j","result","sub","el_mul","mul","transpose","message","newMatrix","temp","k","div","rdiv","Math","floor","pow","tmp","save","determinant","n","M","d","subMatrix","r","c","startRow","endRow","startCol","endCol","toString","str"],"mappings":"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","sourcesContent":["import { Computable, MatrixResult, Result } from \".\";\nimport { ComputableNode } from \"../ast\";\nimport { ArithmeticError, MatrixError, ParsingError } from \"../errors\";\nimport { Numeric } from \"./numeric\";\n\nexport class UnevaluatedMatrix {\n  private matrix: ComputableNode[][];\n  private dimR: number;\n  private dimC: number;\n  /**\n   * constructs a new matrix\n   * @param nodes optional: matrix as nodes if matrix unevaluated\n   * @param rows optional: matrix as numeric array if matrix evaluated\n   */\n  constructor(nodes: ComputableNode[][]) {\n    // raw node matrix\n    this.matrix = nodes;\n    this.dimR = nodes.length;\n    this.dimC = this.dimR > 0 ? nodes[0].length : 0;\n\n    // verify each row is the same length\n    for (let row of nodes) {\n      if (row.length != this.dimC) {\n        throw new MatrixError(\"row dimensions did not match\");\n      }\n    }\n  }\n\n  /**\n   * evaluates matrix from raw nodes\n   */\n  public evaluate(): Matrix {\n    let arr: number[][] = new Array();\n    for (let row = 0; row < this.dimR; row++) {\n      arr.push([]);\n      for (let col = 0; col < this.dimC; col++) {\n        let val = this.matrix[row][col].eval();\n        if (Computable.isNumeric(val)) {\n          arr[row].push(val.value);\n        } else {\n          throw new SyntaxError(\"couldn't evaluate matrix! expected numbers.\");\n        }\n      }\n    }\n    return new Matrix(arr);\n  }\n\n  public static isUnevaluatedMatrix(m: any): m is UnevaluatedMatrix {\n    return m instanceof UnevaluatedMatrix;\n  }\n}\n\nexport class Matrix extends Computable {\n  matrix: number[][];\n  dimR: number;\n  dimC: number;\n\n  /**\n   * constructs a new matrix\n   * @param nodes optional: matrix as nodes if matrix unevaluated\n   * @param rows optional: matrix as numeric array if matrix evaluated\n   */\n  constructor(rows: number[][]) {\n    super();\n\n    this.matrix = rows;\n    this.dimR = rows.length;\n    this.dimC = this.dimR > 0 ? rows[0].length : 0;\n\n    // verify each row is the same length\n    for (let row of rows) {\n      if (row.length != this.dimC) {\n        throw new MatrixError(\"row dimensions did not match\");\n      }\n    }\n  }\n\n  private checkDimensions(other: Matrix) {\n    if (this.dimR != other.dimR || this.dimC != other.dimC) {\n      throw new MatrixError(\n        `can't perform operations on matricies of different dimensions! (${this.dimR} x ${this.dimC}) and (${other.dimR} x ${other.dimC})`\n      );\n    }\n  }\n\n  private expectedMatrixError(): never {\n    throw new ArithmeticError(\"expected a matrix for calculations.\");\n  }\n\n  private expectedMatrixOrNumericError(): never {\n    throw new ArithmeticError(\"expected a matrix or numeric for calculations.\");\n  }\n\n  /**\n   * add two matricies together by elementwise addition or add a constant to the matrix\n   * @param other a computable object\n   */\n  public add(other: Computable): MatrixResult {\n    let arr: number[][] = new Array();\n    if (other.isMatrix()) {\n      // add two matricies together\n      this.checkDimensions(other);\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] + other.matrix[i][j]);\n        }\n      }\n    } else if (Computable.isNumeric(other)) {\n      // add constant to each element\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] + other.value);\n        }\n      }\n    } else {\n      this.expectedMatrixOrNumericError();\n    }\n\n    return { result: new Matrix(arr) };\n  }\n\n  /**\n   * subtracts matrix from this, or subtracts constant from each element\n   * @param other any computable item\n   */\n  public sub(other: Computable): MatrixResult {\n    let arr: number[][] = new Array();\n\n    if (Computable.isMatrix(other)) {\n      // subtract two matricies together\n      this.checkDimensions(other);\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] - other.matrix[i][j]);\n        }\n      }\n    } else if (Computable.isNumeric(other)) {\n      // subtract constant to each element\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] - other.value);\n        }\n      }\n    } else {\n      this.expectedMatrixOrNumericError();\n    }\n\n    return { result: new Matrix(arr) };\n  }\n\n  /**\n   * element-wise multiplication\n   * @param other\n   */\n  public el_mul(other: Matrix): MatrixResult {\n    if (this.dimC == other.dimC && this.dimR == other.dimR) {\n      let arr: number[][] = new Array();\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] * other.matrix[i][j]);\n        }\n      }\n      return { result: new Matrix(arr) };\n    } else {\n      throw new MatrixError(\n        \"cannot do element-wise multiplication on different sized matricies\"\n      );\n    }\n  }\n\n  /**\n   * computes the matrix product or multiplies a matrix by a scalar\n   * @param other any computable item\n   */\n  public mul(other: Computable): Result {\n    if (Computable.isMatrix(other)) {\n      // multiply two matricies\n      // check dimensions are proper\n      if (this.dimC != other.dimR) {\n        if (this.dimC == other.dimC && this.dimR == other.dimR) {\n          return {\n            result: this.mul(other.transpose().result).result,\n            message: \"inferred to take dot product.\",\n          };\n        }\n        throw new MatrixError(\n          `can't multiply matricies of non-matching dimensions! (${this.dimR} x ${this.dimC}) and (${other.dimR} x ${other.dimC})`\n        );\n      }\n      let newMatrix: number[][] = new Array();\n      for (let i = 0; i < this.dimR; i++) {\n        newMatrix.push([]);\n        for (let j = 0; j < other.dimC; j++) {\n          let temp = 0;\n          for (let k = 0; k < this.dimC; k++) {\n            temp += this.matrix[i][k] * other.matrix[k][j];\n          }\n          newMatrix[i].push(temp);\n        }\n\n        if (newMatrix.length == 1 && newMatrix[0].length == 1) {\n          return { result: new Numeric(newMatrix[0][0]) };\n        } else {\n          return { result: new Matrix(newMatrix) };\n        }\n      }\n    } else if (Computable.isNumeric(other)) {\n      let arr: number[][] = new Array();\n      // multiply constant to each element\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] * other.value);\n        }\n      }\n      return { result: new Matrix(arr) };\n    }\n    this.expectedMatrixOrNumericError();\n  }\n\n  /**\n   * divide by a scalar, matrix division is not supported\n   * @param other\n   */\n  public div(other: Computable): MatrixResult {\n    if (Computable.isNumeric(other)) {\n      let arr: number[][] = new Array();\n      // multiply constant to each element\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(this.matrix[i][j] / other.value);\n        }\n      }\n      return { result: new Matrix(arr) };\n    }\n    this.expectedMatrixError();\n  }\n\n  /**\n   * divide by a scalar, matrix division is not supported\n   * @param other\n   */\n  public rdiv(other: Computable): MatrixResult {\n    if (Computable.isNumeric(other)) {\n      let arr: number[][] = new Array();\n      // multiply constant to each element\n      for (let i = 0; i < this.dimR; i++) {\n        arr.push([]);\n        for (let j = 0; j < this.dimC; j++) {\n          arr[i].push(Math.floor(this.matrix[i][j] / other.value));\n        }\n      }\n      return { result: new Matrix(arr) };\n    }\n    this.expectedMatrixError();\n  }\n\n  /**\n   * take power\n   * @param other\n   */\n  public pow(other: Computable): MatrixResult {\n    if (this.dimR != this.dimC) {\n      throw new MatrixError(\"only square matricies can be raised to the power\");\n    }\n    if (Computable.isNumeric(other)) {\n      let newMatrix: Matrix = this;\n      for (let i = 0; i < other.value; i++) {\n        let tmp = newMatrix.mul(this).result;\n        if (Computable.isMatrix(tmp)) {\n          newMatrix = tmp;\n        } else {\n          throw new MatrixError(\"multiplication failed: \" + tmp);\n        }\n      }\n      return { result: newMatrix };\n    } else {\n      throw new MatrixError(\"matrix power is not supported\");\n    }\n  }\n\n  public transpose(save: boolean = false): MatrixResult {\n    let arr: number[][] = new Array();\n    for (let i = 0; i < this.dimC; i++) {\n      arr.push([]);\n      for (let j = 0; j < this.dimR; j++) {\n        arr[i].push(this.matrix[j][i]);\n      }\n    }\n\n    if (save) {\n      this.matrix = arr;\n      let tmp = this.dimR;\n      this.dimR = this.dimC;\n      this.dimC = tmp;\n      return { result: this };\n    }\n    return { result: new Matrix(arr) };\n  }\n\n  public determinant(): number {\n    if (this.dimR != this.dimC) {\n      throw new MatrixError(\"cannot take determinant of non-square matrix\");\n    }\n\n    let n = this.dimR;\n    let M = this.matrix;\n    if (n == 2) {\n      return M[0][0] * M[1][1] - M[0][1] * M[1][0];\n    } else {\n      let d = 0;\n      for (let i = 0; i < n; i++) {\n        // create a sub matrix\n        let subMatrix: number[][] = [];\n        for (let r = 0; r < n; r++) {\n          subMatrix.push([]);\n          for (let c = 0; c < n; c++) {\n            if (c != i) {\n              subMatrix[r].push(this.matrix[r][c]);\n            }\n          }\n        }\n\n        d += M[0][i] * new Matrix(subMatrix).determinant();\n      }\n      return d;\n    }\n  }\n\n  public subMatrix(\n    startRow: number,\n    endRow: number = this.dimR - 1,\n    startCol: number,\n    endCol: number = this.dimC - 1\n  ): Matrix {\n    let arr: number[][] = new Array();\n    for (let i = startRow; i <= endRow; i++) {\n      arr.push([]);\n      for (let j = startCol; j <= endCol; j++) {\n        arr[i].push(this.matrix[i][j]);\n      }\n    }\n    return new Matrix(arr);\n  }\n\n  public toString(): string {\n    let m = this.matrix;\n    let str = \"\";\n    if (m.length == 1) {\n      str += \"< \";\n      for (let i = 0; i < this.dimC; i++) {\n        str += m[0][i];\n        if (i != m[0].length - 1) {\n          str += \" \";\n        }\n      }\n      str += \" >\";\n    } else {\n      str += \"[\";\n      for (let i = 0; i < this.dimR; i++) {\n        if (i != 0) {\n          str += \" \";\n        }\n        str += \"[ \";\n        for (let j = 0; j < this.dimC; j++) {\n          str += m[i][j] + \" \";\n        }\n        str += \"]\";\n        if (i != this.dimR - 1) {\n          str += \"\\n\";\n        }\n      }\n      str += \"]\";\n      str += `  { ${this.dimR} x ${this.dimC} }`;\n    }\n\n    return str;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}