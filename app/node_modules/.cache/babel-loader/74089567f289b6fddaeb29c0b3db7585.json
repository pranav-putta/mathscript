{"ast":null,"code":"import { Computable } from \".\";\n\n/**\n * boolean computable value\n */\nexport class Boolean extends Computable {\n  constructor(value) {\n    super();\n    this.boolVal = void 0;\n    this.value = void 0;\n    this.boolVal = value;\n    this.value = value ? 1 : 0;\n  }\n\n  or(other) {\n    return {\n      result: new Boolean(this.boolVal || other.boolVal)\n    };\n  }\n\n  and(other) {\n    return {\n      result: new Boolean(this.boolVal && other.boolVal)\n    };\n  }\n\n  xor(other) {\n    return {\n      result: new Boolean(this.boolVal !== other.boolVal)\n    };\n  }\n\n  nand(other) {\n    return {\n      result: new Boolean(this.boolVal == other.boolVal && !this.boolVal)\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/computable/boolean.ts"],"names":["Computable","Boolean","constructor","value","boolVal","or","other","result","and","xor","nand"],"mappings":"AAAA,SAAwBA,UAAxB,QAA2D,GAA3D;;AAGA;;;AAGA,OAAO,MAAMC,OAAN,SAAsBD,UAAtB,CAAiC;AAItCE,EAAAA,WAAW,CAACC,KAAD,EAAiB;AAC1B;AAD0B,SAHpBC,OAGoB;AAAA,SAFpBD,KAEoB;AAE1B,SAAKC,OAAL,GAAeD,KAAf;AACA,SAAKA,KAAL,GAAaA,KAAK,GAAG,CAAH,GAAO,CAAzB;AACD;;AAGME,EAAAA,EAAP,CAAUC,KAAV,EAAyC;AACvC,WAAO;AAAEC,MAAAA,MAAM,EAAE,IAAIN,OAAJ,CAAY,KAAKG,OAAL,IAAgBE,KAAK,CAACF,OAAlC;AAAV,KAAP;AACD;;AAEMI,EAAAA,GAAP,CAAWF,KAAX,EAA0C;AACxC,WAAO;AAAEC,MAAAA,MAAM,EAAE,IAAIN,OAAJ,CAAY,KAAKG,OAAL,IAAgBE,KAAK,CAACF,OAAlC;AAAV,KAAP;AACD;;AAEMK,EAAAA,GAAP,CAAWH,KAAX,EAA0C;AACxC,WAAO;AAAEC,MAAAA,MAAM,EAAE,IAAIN,OAAJ,CAAY,KAAKG,OAAL,KAAiBE,KAAK,CAACF,OAAnC;AAAV,KAAP;AACD;;AAEMM,EAAAA,IAAP,CAAYJ,KAAZ,EAA2C;AACzC,WAAO;AACLC,MAAAA,MAAM,EAAE,IAAIN,OAAJ,CAAY,KAAKG,OAAL,IAAgBE,KAAK,CAACF,OAAtB,IAAiC,CAAC,KAAKA,OAAnD;AADH,KAAP;AAGD;;AA3BqC","sourcesContent":["import { BooleanResult, Computable, Numeric, Result } from \".\";\nimport { ArithmeticError } from \"../errors\";\n\n/**\n * boolean computable value\n */\nexport class Boolean extends Computable {\n  private boolVal: boolean;\n  private value: number;\n\n  constructor(value: boolean) {\n    super();\n    this.boolVal = value;\n    this.value = value ? 1 : 0;\n  }\n\n\n  public or(other: Boolean): BooleanResult {\n    return { result: new Boolean(this.boolVal || other.boolVal) };\n  }\n\n  public and(other: Boolean): BooleanResult {\n    return { result: new Boolean(this.boolVal && other.boolVal) };\n  }\n\n  public xor(other: Boolean): BooleanResult {\n    return { result: new Boolean(this.boolVal !== other.boolVal) };\n  }\n\n  public nand(other: Boolean): BooleanResult {\n    return {\n      result: new Boolean(this.boolVal == other.boolVal && !this.boolVal),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}