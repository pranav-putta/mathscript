{"ast":null,"code":"import { ParsingError } from \"./errors\";\nimport { rref, transpose, det, sqrt, identity } from \"./lib\";\nexport let global_scope = {};\nexport let global_functions = {\n  rref: rref,\n  trans: transpose,\n  transpose: transpose,\n  det: det,\n  determinant: det,\n  q: sqrt,\n  sqrt: sqrt,\n  identity: identity\n};\nexport let local_functions = {};\n\nfunction executeLocalFunction(func) {}\n\nexport function executeFunction(f, args) {\n  if (f in global_functions) {\n    let func = global_functions[f];\n    let params = [];\n\n    for (let arg of args) {\n      params.push(arg.eval());\n    }\n\n    return func.apply(null, params);\n  } else if (f in local_functions) {\n    executeLocalFunction(local_functions[f]);\n  } else {\n    throw new ParsingError(`function ${f} couldn't be found`);\n  }\n}\nexport function createUserDefinedFunction(func) {\n  if (func.name in global_functions) {\n    throw new ParsingError(\"conflicting function definition name: \" + func.name);\n  }\n\n  local_functions[func.name] = func;\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/app/src/interpreter/global.ts"],"names":["ParsingError","rref","transpose","det","sqrt","identity","global_scope","global_functions","trans","determinant","q","local_functions","executeLocalFunction","func","executeFunction","f","args","params","arg","push","eval","apply","createUserDefinedFunction","name"],"mappings":"AAEA,SAASA,YAAT,QAA6B,UAA7B;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,QAArC,QAAqD,OAArD;AAcA,OAAO,IAAIC,YAA6B,GAAG,EAApC;AACP,OAAO,IAAIC,gBAAkC,GAAG;AAC9CN,EAAAA,IAAI,EAAEA,IADwC;AAE9CO,EAAAA,KAAK,EAAEN,SAFuC;AAG9CA,EAAAA,SAAS,EAAEA,SAHmC;AAI9CC,EAAAA,GAAG,EAAEA,GAJyC;AAK9CM,EAAAA,WAAW,EAAEN,GALiC;AAM9CO,EAAAA,CAAC,EAAEN,IAN2C;AAO9CA,EAAAA,IAAI,EAAEA,IAPwC;AAQ9CC,EAAAA,QAAQ,EAAEA;AARoC,CAAzC;AAUP,OAAO,IAAIM,eAAgC,GAAG,EAAvC;;AAEP,SAASC,oBAAT,CAA8BC,IAA9B,EAA6D,CAAE;;AAE/D,OAAO,SAASC,eAAT,CAAyBC,CAAzB,EAAoCC,IAApC,EAAiD;AACtD,MAAID,CAAC,IAAIR,gBAAT,EAA2B;AACzB,QAAIM,IAAI,GAAGN,gBAAgB,CAACQ,CAAD,CAA3B;AACA,QAAIE,MAAoB,GAAG,EAA3B;;AACA,SAAK,IAAIC,GAAT,IAAgBF,IAAhB,EAAsB;AACpBC,MAAAA,MAAM,CAACE,IAAP,CAAYD,GAAG,CAACE,IAAJ,EAAZ;AACD;;AACD,WAAOP,IAAI,CAACQ,KAAL,CAAW,IAAX,EAAiBJ,MAAjB,CAAP;AACD,GAPD,MAOO,IAAIF,CAAC,IAAIJ,eAAT,EAA0B;AAC/BC,IAAAA,oBAAoB,CAACD,eAAe,CAACI,CAAD,CAAhB,CAApB;AACD,GAFM,MAEA;AACL,UAAM,IAAIf,YAAJ,CAAkB,YAAWe,CAAE,oBAA/B,CAAN;AACD;AACF;AAED,OAAO,SAASO,yBAAT,CAAmCT,IAAnC,EAAkE;AACvE,MAAIA,IAAI,CAACU,IAAL,IAAahB,gBAAjB,EAAmC;AACjC,UAAM,IAAIP,YAAJ,CACJ,2CAA2Ca,IAAI,CAACU,IAD5C,CAAN;AAGD;;AACDZ,EAAAA,eAAe,CAACE,IAAI,CAACU,IAAN,CAAf,GAA6BV,IAA7B;AACD","sourcesContent":["import { AST, ProcedureDefinitionNode } from \"./ast\";\nimport { Computable } from \"./computable\";\nimport { ParsingError } from \"./errors\";\nimport { rref, transpose, det, sqrt, identity } from \"./lib\";\n\ntype Function = (...args: any[]) => any;\n\ninterface GlobalVariables {\n  [key: string]: any;\n}\ninterface GlobalProcedures {\n  [key: string]: Function;\n}\ninterface LocalProcedures {\n  [key: string]: ProcedureDefinitionNode;\n}\n\nexport let global_scope: GlobalVariables = {};\nexport let global_functions: GlobalProcedures = {\n  rref: rref,\n  trans: transpose,\n  transpose: transpose,\n  det: det,\n  determinant: det,\n  q: sqrt,\n  sqrt: sqrt,\n  identity: identity,\n};\nexport let local_functions: LocalProcedures = {};\n\nfunction executeLocalFunction(func: ProcedureDefinitionNode) {}\n\nexport function executeFunction(f: string, args: AST[]) {\n  if (f in global_functions) {\n    let func = global_functions[f];\n    let params: Computable[] = [];\n    for (let arg of args) {\n      params.push(arg.eval());\n    }\n    return func.apply(null, params);\n  } else if (f in local_functions) {\n    executeLocalFunction(local_functions[f]);\n  } else {\n    throw new ParsingError(`function ${f} couldn't be found`);\n  }\n}\n\nexport function createUserDefinedFunction(func: ProcedureDefinitionNode) {\n  if (func.name in global_functions) {\n    throw new ParsingError(\n      \"conflicting function definition name: \" + func.name\n    );\n  }\n  local_functions[func.name] = func;\n}\n"]},"metadata":{},"sourceType":"module"}