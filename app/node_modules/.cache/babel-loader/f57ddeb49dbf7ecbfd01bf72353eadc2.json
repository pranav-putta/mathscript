{"ast":null,"code":"import { Boolean } from \"./boolean\";\nimport { Matrix } from \"./matrix\";\nimport { Numeric } from \"./numeric\";\nexport class Computable {\n  isMatrix() {\n    return this instanceof Matrix;\n  }\n\n  isNumeric() {\n    return this instanceof Numeric;\n  }\n\n  isBoolean() {\n    return this instanceof Boolean;\n  }\n  /**\n   * checks if given element is of type computable\n   * @param el any element\n   */\n\n\n  static isComputable(el) {\n    return el instanceof Computable;\n  }\n\n  static isMatrix(el) {\n    return el instanceof Matrix;\n  }\n\n  static isNumeric(el) {\n    return el instanceof Numeric;\n  }\n\n  static isBoolean(el) {\n    return el instanceof Boolean;\n  }\n\n}\nexport { Matrix, Numeric };","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/computable/index.ts"],"names":["Boolean","Matrix","Numeric","Computable","isMatrix","isNumeric","isBoolean","isComputable","el"],"mappings":"AACA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAeA,OAAO,MAAeC,UAAf,CAA0B;AAQxBC,EAAAA,QAAP,GAAkC;AAChC,WAAO,gBAAgBH,MAAvB;AACD;;AAEMI,EAAAA,SAAP,GAAoC;AAClC,WAAO,gBAAgBH,OAAvB;AACD;;AAEMI,EAAAA,SAAP,GAAoC;AAClC,WAAO,gBAAgBN,OAAvB;AACD;AAED;;;;;;AAIA,SAAcO,YAAd,CAA2BC,EAA3B,EAAsD;AACpD,WAAOA,EAAE,YAAYL,UAArB;AACD;;AAED,SAAcC,QAAd,CAAuBI,EAAvB,EAA8C;AAC5C,WAAOA,EAAE,YAAYP,MAArB;AACD;;AAED,SAAcI,SAAd,CAAwBG,EAAxB,EAAgD;AAC9C,WAAOA,EAAE,YAAYN,OAArB;AACD;;AAED,SAAcI,SAAd,CAAwBE,EAAxB,EAAgD;AAC9C,WAAOA,EAAE,YAAYR,OAArB;AACD;;AAtC8B;AAyCjC,SAASC,MAAT,EAAiBC,OAAjB","sourcesContent":["import { TokenType } from \"../token\";\nimport { Boolean } from \"./boolean\";\nimport { Matrix } from \"./matrix\";\nimport { Numeric } from \"./numeric\";\n\nexport interface Result {\n  result: Computable;\n  message?: string;\n}\n\nexport interface MatrixResult extends Result {\n  result: Matrix;\n}\n\nexport interface BooleanResult extends Result {\n  result: Boolean;\n}\n\nexport abstract class Computable {\n  public abstract add(other: Computable): Result;\n  public abstract sub(other: Computable): Result;\n  public abstract mul(other: Computable): Result;\n  public abstract div(other: Computable): Result;\n  public abstract rdiv(other: Computable): Result;\n  public abstract pow(other: Computable): Result;\n\n  public isMatrix(): this is Matrix {\n    return this instanceof Matrix;\n  }\n\n  public isNumeric(): this is Numeric {\n    return this instanceof Numeric;\n  }\n\n  public isBoolean(): this is Boolean {\n    return this instanceof Boolean;\n  }\n\n  /**\n   * checks if given element is of type computable\n   * @param el any element\n   */\n  public static isComputable(el: any): el is Computable {\n    return el instanceof Computable;\n  }\n\n  public static isMatrix(el: any): el is Matrix {\n    return el instanceof Matrix;\n  }\n\n  public static isNumeric(el: any): el is Numeric {\n    return el instanceof Numeric;\n  }\n\n  public static isBoolean(el: any): el is Boolean {\n    return el instanceof Boolean;\n  }\n}\n\nexport { Matrix, Numeric };\n"]},"metadata":{},"sourceType":"module"}