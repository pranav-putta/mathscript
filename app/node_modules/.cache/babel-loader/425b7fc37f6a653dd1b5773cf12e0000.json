{"ast":null,"code":"import { AssignNode, BinaryOperatorNode, CompoundNode, isComputableNode, SingleValueNode, UnaryOperatorNode, VariableNode, ProcedureCallNode, VariableScope, ProcedureDefinitionNode } from \"./ast\";\nimport { Numeric, Logical, UnevaluatedMatrix } from \"./computable\";\nimport { MatrixError, ParsingError, SymbolError, SyntaxError } from \"./errors\";\nimport { Lexer } from \"./lexer\";\nimport { TokenType, isNumericToken, isSymbolToken } from \"./token\";\nexport class Parser {\n  constructor(lexer) {\n    this.lexer = void 0;\n    this.current_token = void 0;\n    this.lexer = lexer;\n    this.current_token = this.lexer.next_token();\n  }\n  /**\n   * parse tokens into an abstract syntax tree for traversal\n   */\n\n\n  parse() {\n    let node = this.program();\n\n    if (this.current_token.type != TokenType.eof) {\n      throw new SyntaxError(\"parsing didn't go as expected!\");\n    }\n\n    return node;\n  }\n  /**\n   * identify expression\n   * expr   : term ((PLUS | MINUS) term)* | term ((PLUS | MINUS)term)*\n   * term   : powers ((MUL | DIV ) powers)*\n   * powers : factor ((POW) factor)*\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix | variable | procedure | (TRUE | FALSE)\n   * matrix :  lbracket (row)* rbracket\n   */\n\n\n  expr(ignoreWhiteSpace = true) {\n    let opsOrder = [{\n      tokens: [TokenType.pow],\n      igws: true\n    }, {\n      tokens: [TokenType.mul, TokenType.div, TokenType.rdiv],\n      igws: true\n    }, {\n      tokens: [TokenType.plus, TokenType.minus],\n      igws: ignoreWhiteSpace\n    }, {\n      tokens: [TokenType.and],\n      igws: true\n    }, {\n      tokens: [TokenType.or],\n      igws: true\n    }];\n    let func = this.factor;\n\n    for (let op of opsOrder.reverse()) {\n      func = this.binops(func, op.tokens, op.igws);\n    }\n\n    return func.apply(this);\n  }\n  /**\n   *\n   * @param func\n   * @param operators\n   * @param ignoreWhiteSpace\n   */\n\n\n  binops(func, operators, ignoreWhiteSpace = true) {\n    return () => {\n      // left node\n      let node = func.apply(this);\n      let token = this.current_token;\n\n      while (operators.includes(token.type)) {\n        if (ignoreWhiteSpace || this.lexer.peek(1) == \" \" || this.lexer.peek(-1) != \" \") {\n          this.eat(token.type);\n          node = new BinaryOperatorNode(node, token, func.apply(this));\n          token = this.current_token;\n        } else {\n          return node;\n        }\n      }\n\n      return node;\n    };\n  }\n  /**\n   * identify factor\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix\n   * matrix :  lbracket (row)* rbracket\n   * @return abstract syntax node\n   */\n\n\n  factor() {\n    let token = this.current_token;\n\n    if (token.type == TokenType.plus) {\n      // positive sign\n      this.eat(TokenType.plus);\n      return new UnaryOperatorNode(token, this.factor());\n    } else if (token.type == TokenType.minus) {\n      // negation sign\n      this.eat(TokenType.minus);\n      return new UnaryOperatorNode(token, this.factor());\n    } else if (isNumericToken(token)) {\n      // token is a number\n      this.eat(TokenType.num);\n      return new SingleValueNode(new Numeric(token.value));\n    } else if (token.type == TokenType.lparen) {\n      // lparen expr rparen\n      this.eat(TokenType.lparen);\n      let node = this.expr();\n      this.eat(TokenType.rparen);\n      return node;\n    } else if (token.type == TokenType.lbracket) {\n      // matrix\n      return new SingleValueNode(this.matrix());\n    } else if (token.type == TokenType.larrow) {\n      // vector (meaning single row matrix)\n      return new SingleValueNode(this.vector());\n    } else if (token.type == TokenType.primitive) {\n      return this.primitive();\n    } else if (token.type == TokenType.id) {\n      // identifier\n      let next = this.lexer.peek();\n\n      if (next && next == \"(\") {\n        // procedure\n        return this.procedure();\n      } else {\n        // variable identifier\n        return this.variable();\n      }\n    }\n\n    throw new SyntaxError(\"unexpected symbol\");\n  }\n  /**\n   * a primitive alphanumeric type like boolean\n   */\n\n\n  primitive() {\n    let token = this.current_token;\n\n    if (token.type == TokenType.primitive) {\n      if (token.value === Lexer.reserved_keywords[\"true\"].value) {\n        this.eat(TokenType.primitive);\n        return new SingleValueNode(new Logical(true));\n      } else if (token.value === Lexer.reserved_keywords[\"false\"].value) {\n        this.eat(TokenType.primitive);\n        return new SingleValueNode(new Logical(false));\n      }\n    }\n\n    throw new ParsingError(\"unexpected symbol: \" + token.value);\n  }\n  /**\n   * vector : single row matrix\n   */\n\n\n  vector() {\n    // check left arrow\n    this.eat(TokenType.larrow); // get one row\n\n    let row = this.matrix_row(TokenType.rarrow); // check right arrow\n\n    this.eat(TokenType.rarrow);\n    return new UnevaluatedMatrix([row]);\n  }\n  /**\n   * matrix :  lbracket (row ;)* (row ]) rbracket\n   */\n\n\n  matrix() {\n    let arr = new Array(); // check left bracket\n\n    this.eat(TokenType.lbracket, \"parsing matrix: \"); // loop through rows\n\n    while (this.current_token.type != TokenType.rbracket) {\n      let row = this.matrix_row(TokenType.rbracket);\n      arr.push(row);\n\n      if (this.current_token.type == TokenType.semicolon) {\n        this.eat(TokenType.semicolon, \"parsing matrix row: \");\n      }\n    } // check right bracket\n\n\n    this.eat(TokenType.rbracket, \"parsing matrix: \");\n    return new UnevaluatedMatrix(arr);\n  }\n  /**\n   * row : (factor,)*\n   */\n\n\n  matrix_row(endToken) {\n    let arr = new Array();\n\n    while (true) {\n      let val = this.expr(false); // make sure the element is computable\n\n      if (isComputableNode(val)) {\n        // everything else is good, push element into row\n        arr.push(val); // if row hasn't reached end, consume 'comma' separator\n\n        if (this.current_token.type != TokenType.semicolon && this.current_token.type != endToken) {\n          if (this.current_token.type == TokenType.comma) {\n            this.eat(TokenType.comma, \"parsing matrix row: \");\n          }\n        } else {\n          break;\n        }\n      } else {\n        throw new MatrixError(\"matrix parsing error: expected a numeric element\");\n      }\n    }\n\n    return arr;\n  }\n  /**\n   * consume token and advance to next token\n   * @param type token type to verify\n   */\n\n\n  eat(type, message) {\n    if (this.current_token.type == type) {\n      // if expected token type and current token type matches, proceed to next token\n      this.current_token = this.lexer.next_token();\n    } else {\n      // if token type does not match, a syntax error has happened\n      throw new SyntaxError(message || \"\" + \"expected \" + type.toString() + \", but got \" + this.current_token.type.toString());\n    }\n  }\n  /**\n   * variable : id\n   */\n\n\n  variable() {\n    if (isSymbolToken(this.current_token)) {\n      let node = new VariableNode(this.current_token, VariableScope.global);\n      this.eat(TokenType.id);\n      return node;\n    }\n\n    throw new SymbolError(\"couldn't parse variable name\");\n  }\n  /**\n   * program : compound eof\n   */\n\n\n  program() {\n    let node = this.compound();\n    this.eat(TokenType.eof);\n    return node;\n  }\n  /**\n   * compound: statement_list\n   */\n\n\n  compound() {\n    return new CompoundNode(this.statement_list());\n  }\n  /**\n   * statement_list : statement | statement endl statement_list\n   */\n\n\n  statement_list() {\n    let results = this.statement();\n\n    while (this.current_token.type == TokenType.endl) {\n      // ignore all end lines\n      while (this.current_token.type == TokenType.endl) {\n        this.eat(TokenType.endl);\n      }\n\n      results = results.concat(this.statement());\n    }\n\n    if (this.current_token.type == TokenType.id) {\n      throw new SyntaxError(\"unexpected identifier\");\n    }\n\n    return results;\n  }\n  /**\n   * statement : id_statement | expr\n   */\n\n\n  statement() {\n    if (this.current_token.type == TokenType.id) {\n      return this.id_statement();\n    } else if (this.current_token.type == TokenType.reserved) {\n      return this.reserved_statement();\n    } else if (this.current_token.type != TokenType.eof) {\n      return [this.expr(true)];\n    } else {\n      return [];\n    }\n  }\n\n  reserved_statement() {\n    let token = this.current_token;\n    throw new ParsingError(\"unexpected reserve word\");\n  }\n  /**\n   * id_statement : assignemnt | procedure | expr\n   */\n\n\n  id_statement() {\n    let token = this.current_token;\n\n    if (token.type == TokenType.id) {\n      if (this.lexer.peekIgnoreWhitespace() == \"=\") {\n        return this.assignment();\n      } else if (this.lexer.peekIgnoreWhitespace() == \"(\") {\n        // look for procedure\n        let proc = this.procedure(); // check if defining a procedure or calling it\n\n        let next = this.current_token;\n\n        if (next.type == TokenType.define) {\n          this.eat(TokenType.define); // make sure all of the parameters are variables\n\n          let args = proc.args;\n\n          if (VariableNode.isVariableArray(args)) {\n            // change scope of variables\n            for (let arg of args) {\n              arg.scope = VariableScope.procedure;\n            } // load expression TODO: add multiple line support\n\n\n            let expr = this.expr();\n            return [new ProcedureDefinitionNode(proc.name, args, [expr])];\n          } else {\n            throw new ParsingError(\"cannot define a function with non-variable parameters\");\n          }\n        } else {\n          return [proc];\n        }\n      } else {\n        return [this.expr()];\n      }\n    }\n\n    throw new ParsingError(\"couldn't find an identifier!\");\n  }\n  /**\n   * assignment : (variable = expr) (,variable = expr)*\n   */\n\n\n  assignment() {\n    let left = this.variable();\n    let token = this.current_token;\n    this.eat(TokenType.assign, \"parsing assignment: \");\n    let right = this.expr();\n    let assignments = [new AssignNode(left, token, right)]; //  check if multiline assignment\n\n    if (this.current_token.type == TokenType.comma) {\n      this.eat(TokenType.comma);\n      let next = this.assignment();\n      assignments = assignments.concat(next);\n    }\n\n    return assignments;\n  }\n  /**\n   * procedure : id lparen (expr,)* rparen\n   */\n\n\n  procedure() {\n    let token = this.current_token;\n\n    if (!isSymbolToken(token)) {\n      throw new SymbolError(\"expected an identifier symbol but didn't get it!\");\n    }\n\n    this.eat(TokenType.id);\n    this.eat(TokenType.lparen);\n    let args = [];\n\n    while (this.current_token.type != TokenType.rparen) {\n      args.push(this.expr());\n\n      if (this.current_token.type == TokenType.comma) {\n        this.eat(TokenType.comma);\n      } else {\n        break;\n      }\n    }\n\n    this.eat(TokenType.rparen);\n    return new ProcedureCallNode(token, args);\n  }\n\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/app/src/interpreter/parser.ts"],"names":["AssignNode","BinaryOperatorNode","CompoundNode","isComputableNode","SingleValueNode","UnaryOperatorNode","VariableNode","ProcedureCallNode","VariableScope","ProcedureDefinitionNode","Numeric","Logical","UnevaluatedMatrix","MatrixError","ParsingError","SymbolError","SyntaxError","Lexer","TokenType","isNumericToken","isSymbolToken","Parser","constructor","lexer","current_token","next_token","parse","node","program","type","eof","expr","ignoreWhiteSpace","opsOrder","tokens","pow","igws","mul","div","rdiv","plus","minus","and","or","func","factor","op","reverse","binops","apply","operators","token","includes","peek","eat","num","value","lparen","rparen","lbracket","matrix","larrow","vector","primitive","id","next","procedure","variable","reserved_keywords","row","matrix_row","rarrow","arr","Array","rbracket","push","semicolon","endToken","val","comma","message","toString","global","compound","statement_list","results","statement","endl","concat","id_statement","reserved","reserved_statement","peekIgnoreWhitespace","assignment","proc","define","args","isVariableArray","arg","scope","name","left","assign","right","assignments"],"mappings":"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","sourcesContent":["import {\n  AssignNode,\n  AST,\n  BinaryOperatorNode,\n  CompoundNode,\n  ComputableNode,\n  isComputableNode,\n  SingleValueNode,\n  UnaryOperatorNode,\n  VariableNode,\n  ProcedureCallNode,\n  VariableScope,\n  ProcedureDefinitionNode,\n} from \"./ast\";\nimport { Numeric, Logical, UnevaluatedMatrix } from \"./computable\";\nimport { MatrixError, ParsingError, SymbolError, SyntaxError } from \"./errors\";\nimport { Lexer } from \"./lexer\";\nimport { TokenType, Token, isNumericToken, isSymbolToken } from \"./token\";\n\ninterface Operation {\n  tokens: TokenType[];\n  igws: boolean;\n}\nexport class Parser {\n  private lexer: Lexer;\n  private current_token: Token;\n\n  constructor(lexer: Lexer) {\n    this.lexer = lexer;\n    this.current_token = this.lexer.next_token();\n  }\n\n  /**\n   * parse tokens into an abstract syntax tree for traversal\n   */\n  public parse(): AST {\n    let node = this.program();\n    if (this.current_token.type != TokenType.eof) {\n      throw new SyntaxError(\"parsing didn't go as expected!\");\n    }\n    return node;\n  }\n\n  /**\n   * identify expression\n   * expr   : term ((PLUS | MINUS) term)* | term ((PLUS | MINUS)term)*\n   * term   : powers ((MUL | DIV ) powers)*\n   * powers : factor ((POW) factor)*\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix | variable | procedure | (TRUE | FALSE)\n   * matrix :  lbracket (row)* rbracket\n   */\n  private expr(ignoreWhiteSpace: boolean = true): AST {\n    let opsOrder: Operation[] = [\n      { tokens: [TokenType.pow], igws: true },\n      {\n        tokens: [TokenType.mul, TokenType.div, TokenType.rdiv],\n        igws: true,\n      },\n      {\n        tokens: [TokenType.plus, TokenType.minus],\n        igws: ignoreWhiteSpace,\n      },\n      { tokens: [TokenType.and], igws: true },\n      { tokens: [TokenType.or], igws: true },\n    ];\n    let func = this.factor;\n    for (let op of opsOrder.reverse()) {\n      func = this.binops(func, op.tokens, op.igws);\n    }\n    return func.apply(this);\n  }\n\n  /**\n   *\n   * @param func\n   * @param operators\n   * @param ignoreWhiteSpace\n   */\n  private binops(\n    func: () => AST,\n    operators: TokenType[],\n    ignoreWhiteSpace: boolean = true\n  ) {\n    return (): AST => {\n      // left node\n      let node: AST = func.apply(this);\n      let token: Token = this.current_token;\n      while (operators.includes(token.type)) {\n        if (\n          ignoreWhiteSpace ||\n          this.lexer.peek(1) == \" \" ||\n          this.lexer.peek(-1) != \" \"\n        ) {\n          this.eat(token.type);\n          node = new BinaryOperatorNode(node, token, func.apply(this));\n          token = this.current_token;\n        } else {\n          return node;\n        }\n      }\n      return node;\n    };\n  }\n\n  /**\n   * identify factor\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix\n   * matrix :  lbracket (row)* rbracket\n   * @return abstract syntax node\n   */\n  private factor(): AST {\n    let token = this.current_token;\n    if (token.type == TokenType.plus) {\n      // positive sign\n      this.eat(TokenType.plus);\n      return new UnaryOperatorNode(token, this.factor());\n    } else if (token.type == TokenType.minus) {\n      // negation sign\n      this.eat(TokenType.minus);\n      return new UnaryOperatorNode(token, this.factor());\n    } else if (isNumericToken(token)) {\n      // token is a number\n      this.eat(TokenType.num);\n      return new SingleValueNode(new Numeric(token.value));\n    } else if (token.type == TokenType.lparen) {\n      // lparen expr rparen\n      this.eat(TokenType.lparen);\n      let node: AST = this.expr();\n      this.eat(TokenType.rparen);\n      return node;\n    } else if (token.type == TokenType.lbracket) {\n      // matrix\n      return new SingleValueNode(this.matrix());\n    } else if (token.type == TokenType.larrow) {\n      // vector (meaning single row matrix)\n      return new SingleValueNode(this.vector());\n    } else if (token.type == TokenType.primitive) {\n      return this.primitive();\n    } else if (token.type == TokenType.id) {\n      // identifier\n      let next = this.lexer.peek();\n      if (next && next == \"(\") {\n        // procedure\n        return this.procedure();\n      } else {\n        // variable identifier\n        return this.variable();\n      }\n    }\n\n    throw new SyntaxError(\"unexpected symbol\");\n  }\n\n  /**\n   * a primitive alphanumeric type like boolean\n   */\n  private primitive(): AST {\n    let token = this.current_token;\n    if (token.type == TokenType.primitive) {\n      if (token.value === Lexer.reserved_keywords[\"true\"].value) {\n        this.eat(TokenType.primitive);\n        return new SingleValueNode(new Logical(true));\n      } else if (token.value === Lexer.reserved_keywords[\"false\"].value) {\n        this.eat(TokenType.primitive);\n        return new SingleValueNode(new Logical(false));\n      }\n    }\n    throw new ParsingError(\"unexpected symbol: \" + token.value);\n  }\n  /**\n   * vector : single row matrix\n   */\n  private vector(): UnevaluatedMatrix {\n    // check left arrow\n    this.eat(TokenType.larrow);\n    // get one row\n    let row = this.matrix_row(TokenType.rarrow);\n    // check right arrow\n    this.eat(TokenType.rarrow);\n    return new UnevaluatedMatrix([row]);\n  }\n\n  /**\n   * matrix :  lbracket (row ;)* (row ]) rbracket\n   */\n  private matrix(): UnevaluatedMatrix {\n    let arr: ComputableNode[][] = new Array();\n    // check left bracket\n    this.eat(TokenType.lbracket, \"parsing matrix: \");\n    // loop through rows\n    while (this.current_token.type != TokenType.rbracket) {\n      let row = this.matrix_row(TokenType.rbracket);\n      arr.push(row);\n      if (this.current_token.type == TokenType.semicolon) {\n        this.eat(TokenType.semicolon, \"parsing matrix row: \");\n      }\n    }\n    // check right bracket\n    this.eat(TokenType.rbracket, \"parsing matrix: \");\n    return new UnevaluatedMatrix(arr);\n  }\n\n  /**\n   * row : (factor,)*\n   */\n  private matrix_row(endToken: TokenType): ComputableNode[] {\n    let arr: ComputableNode[] = new Array();\n\n    while (true) {\n      let val = this.expr(false);\n      // make sure the element is computable\n      if (isComputableNode(val)) {\n        // everything else is good, push element into row\n        arr.push(val);\n        // if row hasn't reached end, consume 'comma' separator\n        if (\n          this.current_token.type != TokenType.semicolon &&\n          this.current_token.type != endToken\n        ) {\n          if (this.current_token.type == TokenType.comma) {\n            this.eat(TokenType.comma, \"parsing matrix row: \");\n          }\n        } else {\n          break;\n        }\n      } else {\n        throw new MatrixError(\n          \"matrix parsing error: expected a numeric element\"\n        );\n      }\n    }\n\n    return arr;\n  }\n\n  /**\n   * consume token and advance to next token\n   * @param type token type to verify\n   */\n  private eat(type: TokenType, message?: string) {\n    if (this.current_token.type == type) {\n      // if expected token type and current token type matches, proceed to next token\n      this.current_token = this.lexer.next_token();\n    } else {\n      // if token type does not match, a syntax error has happened\n      throw new SyntaxError(\n        message ||\n          \"\" +\n            \"expected \" +\n            type.toString() +\n            \", but got \" +\n            this.current_token.type.toString()\n      );\n    }\n  }\n\n  /**\n   * variable : id\n   */\n  private variable(): VariableNode {\n    if (isSymbolToken(this.current_token)) {\n      let node = new VariableNode(this.current_token, VariableScope.global);\n      this.eat(TokenType.id);\n      return node;\n    }\n    throw new SymbolError(\"couldn't parse variable name\");\n  }\n\n  /**\n   * program : compound eof\n   */\n  private program(): AST {\n    let node = this.compound();\n    this.eat(TokenType.eof);\n    return node;\n  }\n\n  /**\n   * compound: statement_list\n   */\n  private compound(): AST {\n    return new CompoundNode(this.statement_list());\n  }\n\n  /**\n   * statement_list : statement | statement endl statement_list\n   */\n  private statement_list(): AST[] {\n    let results = this.statement();\n    while (this.current_token.type == TokenType.endl) {\n      // ignore all end lines\n      while (this.current_token.type == TokenType.endl) {\n        this.eat(TokenType.endl);\n      }\n      results = results.concat(this.statement());\n    }\n\n    if (this.current_token.type == TokenType.id) {\n      throw new SyntaxError(\"unexpected identifier\");\n    }\n\n    return results;\n  }\n\n  /**\n   * statement : id_statement | expr\n   */\n  private statement(): AST[] {\n    if (this.current_token.type == TokenType.id) {\n      return this.id_statement();\n    } else if (this.current_token.type == TokenType.reserved) {\n      return this.reserved_statement();\n    } else if (this.current_token.type != TokenType.eof) {\n      return [this.expr(true)];\n    } else {\n      return [];\n    }\n  }\n\n  private reserved_statement(): AST[] {\n    let token = this.current_token;\n    throw new ParsingError(\"unexpected reserve word\");\n  }\n\n  /**\n   * id_statement : assignemnt | procedure | expr\n   */\n  private id_statement(): AST[] {\n    let token = this.current_token;\n    if (token.type == TokenType.id) {\n      if (this.lexer.peekIgnoreWhitespace() == \"=\") {\n        return this.assignment();\n      } else if (this.lexer.peekIgnoreWhitespace() == \"(\") {\n        // look for procedure\n        let proc = this.procedure();\n        // check if defining a procedure or calling it\n        let next: Token = this.current_token;\n        if (next.type == TokenType.define) {\n          this.eat(TokenType.define)\n          // make sure all of the parameters are variables\n          let args = proc.args;\n          if (VariableNode.isVariableArray(args)) {\n            // change scope of variables\n            for (let arg of args) {\n              arg.scope = VariableScope.procedure;\n            }\n            // load expression TODO: add multiple line support\n            let expr = this.expr();\n            return [new ProcedureDefinitionNode(proc.name, args, [expr])];\n          } else {\n            throw new ParsingError(\n              \"cannot define a function with non-variable parameters\"\n            );\n          }\n        } else {\n          return [proc];\n        }\n      } else {\n        return [this.expr()];\n      }\n    }\n\n    throw new ParsingError(\"couldn't find an identifier!\");\n  }\n\n  /**\n   * assignment : (variable = expr) (,variable = expr)*\n   */\n  private assignment(): AssignNode[] {\n    let left = this.variable();\n    let token = this.current_token;\n    this.eat(TokenType.assign, \"parsing assignment: \");\n    let right = this.expr();\n    let assignments = [new AssignNode(left, token, right)];\n    //  check if multiline assignment\n    if (this.current_token.type == TokenType.comma) {\n      this.eat(TokenType.comma);\n      let next = this.assignment();\n      assignments = assignments.concat(next);\n    }\n    return assignments;\n  }\n\n  /**\n   * procedure : id lparen (expr,)* rparen\n   */\n  private procedure(): ProcedureCallNode {\n    let token = this.current_token;\n    if (!isSymbolToken(token)) {\n      throw new SymbolError(\"expected an identifier symbol but didn't get it!\");\n    }\n    this.eat(TokenType.id);\n    this.eat(TokenType.lparen);\n    let args = [];\n    while (this.current_token.type != TokenType.rparen) {\n      args.push(this.expr());\n      if (this.current_token.type == TokenType.comma) {\n        this.eat(TokenType.comma);\n      } else {\n        break;\n      }\n    }\n    this.eat(TokenType.rparen);\n    return new ProcedureCallNode(token, args);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}