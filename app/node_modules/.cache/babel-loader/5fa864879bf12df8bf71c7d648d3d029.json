{"ast":null,"code":"import { global_functions, global_scope } from \"./global\";\nimport { Computable, Numeric } from \"./computable\";\nimport { ParsingError, SymbolError, UndeclaredVariableError } from \"./errors\";\nimport { TokenType } from \"./token\";\nimport { UnevaluatedMatrix } from \"./computable/matrix\";\n/**\n * abstract syntax tree base class\n */\n\nexport class AbstractSyntaxTree {}\n/**\n * compound statements go here\n */\n\nexport class CompoundNode extends AbstractSyntaxTree {\n  constructor(nodes = []) {\n    super();\n    this.children = void 0;\n    this.children = nodes;\n  }\n\n  eval() {\n    let results = [];\n\n    for (let child of this.children) {\n      let val = child.eval();\n      results.push(val);\n    }\n\n    return results;\n  }\n\n}\n/**\n * assigns a variable to its value\n */\n\nexport class AssignNode extends AbstractSyntaxTree {\n  constructor(left, token, right) {\n    super();\n    this.left = void 0;\n    this.right = void 0;\n    this.left = left;\n    this.right = right;\n  }\n\n  eval() {\n    let name = this.left.value;\n    let val = this.right.eval();\n    global_scope[name] = val;\n    return `${name} = ${global_scope[name]}`;\n  }\n\n}\n/**\n * computes a procedure\n */\n\nexport class ProcedureNode extends AbstractSyntaxTree {\n  constructor(token, args) {\n    super();\n    this.name = void 0;\n    this.args = void 0;\n    this.name = token.value;\n    this.args = args;\n  }\n\n  eval() {\n    let func = global_functions[this.name];\n    let result = func.apply(this, this.args);\n    console.log(result);\n    return result;\n  }\n\n}\n/**\n * empty node, doesn't do anything\n */\n\nexport class EmptyNode extends AbstractSyntaxTree {\n  eval() {\n    return;\n  }\n\n}\n/**\n * node that returns a computable value when evaluated\n */\n\nexport class ComputableNode extends AbstractSyntaxTree {}\n/**\n * binary operator node\n * takes a (left, operator, right)\n */\n\nexport class BinaryOperatorNode extends ComputableNode {\n  /**\n   * left node in binary operation\n   */\n\n  /**\n   * right node in binary operation\n   */\n\n  /**\n   * operator\n   */\n  constructor(left, operator, right) {\n    super();\n    this.left = void 0;\n    this.right = void 0;\n    this.operator = void 0;\n    this.left = left;\n    this.right = right;\n    this.operator = operator;\n  }\n\n  eval() {\n    let l = this.left.eval();\n    let r = this.right.eval();\n\n    if (Computable.isComputable(l) && Computable.isComputable(r)) {\n      return Computable.compute(l, r, this.operator.type).result;\n    }\n\n    throw new ParsingError(`cannot operate on two non-computable values: ${l} and ${r}`);\n  }\n\n}\n/**\n * holds a variable and its value\n */\n\nexport class VariableNode extends ComputableNode {\n  get value() {\n    return this._value;\n  }\n\n  constructor(token) {\n    super();\n    this._value = void 0;\n    this._value = token.value;\n  }\n\n  eval() {\n    let name = this.value;\n    let val = global_scope[name];\n\n    if (val) {\n      console.log(`${name} = ${val}`);\n      return val;\n    } else {\n      throw new UndeclaredVariableError(`${name} was not declared!`);\n    }\n  }\n\n}\n/**\n * stores a single value: number or matrix\n */\n\nexport class SingleValueNode extends ComputableNode {\n  constructor(value) {\n    super();\n    this.value = void 0;\n    this.value = value;\n  }\n\n  eval() {\n    // evaluate unevaluated matrix if not done already\n    if (UnevaluatedMatrix.isUnevaluatedMatrix(this.value)) {\n      this.value = this.value.evaluate();\n    }\n\n    return this.value;\n  }\n\n}\n/**\n * holds a unary operator\n */\n\nexport class UnaryOperatorNode extends ComputableNode {\n  constructor(token, next) {\n    super();\n    this.token = void 0;\n    this.next = void 0;\n    this.token = token;\n    this.next = next;\n  }\n\n  eval() {\n    if (this.token.type == TokenType.plus) {\n      return this.next.eval();\n    } else if (this.token.type == TokenType.minus) {\n      return this.next.eval().mul(new Numeric(-1)).result;\n    } else {\n      throw new SymbolError(\"unexpected unary operator: \" + this.token.type.toString());\n    }\n  }\n\n}\nexport function isComputableNode(node) {\n  return node instanceof ComputableNode;\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/ast.ts"],"names":["global_functions","global_scope","Computable","Numeric","ParsingError","SymbolError","UndeclaredVariableError","TokenType","UnevaluatedMatrix","AbstractSyntaxTree","CompoundNode","constructor","nodes","children","eval","results","child","val","push","AssignNode","left","token","right","name","value","ProcedureNode","args","func","result","apply","console","log","EmptyNode","ComputableNode","BinaryOperatorNode","operator","l","r","isComputable","compute","type","VariableNode","_value","SingleValueNode","isUnevaluatedMatrix","evaluate","UnaryOperatorNode","next","plus","minus","mul","toString","isComputableNode","node"],"mappings":"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","sourcesContent":["import { global_functions, global_scope } from \"./global\";\nimport { Computable, Numeric } from \"./computable\";\nimport { ParsingError, SymbolError, UndeclaredVariableError } from \"./errors\";\nimport { SymbolToken, Token, TokenType } from \"./token\";\nimport { UnevaluatedMatrix } from \"./computable/matrix\";\n\n/**\n * abstract syntax tree base class\n */\nexport abstract class AbstractSyntaxTree {\n  /**\n   * abstract evaluate method. visits all nodes in postorder traversal\n   */\n  abstract eval(): any;\n}\n\n/**\n * compound statements go here\n */\nexport class CompoundNode extends AbstractSyntaxTree {\n  children: AST[];\n\n  constructor(nodes: AST[] = []) {\n    super();\n    this.children = nodes;\n  }\n\n  eval() {\n    let results = [];\n    for (let child of this.children) {\n      let val = child.eval();\n      results.push(val);\n    }\n    return results;\n  }\n}\n\n/**\n * assigns a variable to its value\n */\nexport class AssignNode extends AbstractSyntaxTree {\n  private left: VariableNode;\n  private right: AST;\n\n  constructor(left: VariableNode, token: Token, right: AST) {\n    super();\n    this.left = left;\n    this.right = right;\n  }\n  eval() {\n    let name = this.left.value;\n    let val = this.right.eval();\n    global_scope[name] = val;\n    return `${name} = ${global_scope[name]}`;\n  }\n}\n\n/**\n * computes a procedure\n */\nexport class ProcedureNode extends AbstractSyntaxTree {\n  private name: string;\n  private args: AST[];\n\n  constructor(token: SymbolToken, args: AST[]) {\n    super();\n    this.name = token.value;\n    this.args = args;\n  }\n\n  eval() {\n    let func = global_functions[this.name];\n    let result = func.apply(this, this.args);\n    console.log(result);\n    return result;\n  }\n}\n\n/**\n * empty node, doesn't do anything\n */\nexport class EmptyNode extends AbstractSyntaxTree {\n  eval() {\n    return;\n  }\n}\n/**\n * node that returns a computable value when evaluated\n */\nexport abstract class ComputableNode extends AbstractSyntaxTree {\n  abstract eval(): Computable;\n}\n\n/**\n * binary operator node\n * takes a (left, operator, right)\n */\nexport class BinaryOperatorNode extends ComputableNode {\n  /**\n   * left node in binary operation\n   */\n  private left: AST;\n  /**\n   * right node in binary operation\n   */\n  private right: AST;\n  /**\n   * operator\n   */\n  private operator: Token;\n\n  constructor(left: AST, operator: Token, right: AST) {\n    super();\n    this.left = left;\n    this.right = right;\n    this.operator = operator;\n  }\n\n  public eval(): Computable {\n    let l = this.left.eval();\n    let r = this.right.eval();\n\n    if (Computable.isComputable(l) && Computable.isComputable(r)) {\n      return Computable.compute(l, r, this.operator.type).result;\n    }\n\n    throw new ParsingError(\n      `cannot operate on two non-computable values: ${l} and ${r}`\n    );\n  }\n}\n\n/**\n * holds a variable and its value\n */\nexport class VariableNode extends ComputableNode {\n  private _value: string;\n\n  public get value(): string {\n    return this._value;\n  }\n\n  constructor(token: SymbolToken) {\n    super();\n    this._value = token.value;\n  }\n  eval() {\n    let name = this.value;\n    let val = global_scope[name];\n    if (val) {\n      console.log(`${name} = ${val}`);\n      return val;\n    } else {\n      throw new UndeclaredVariableError(`${name} was not declared!`);\n    }\n  }\n}\n\n/**\n * stores a single value: number or matrix\n */\nexport class SingleValueNode extends ComputableNode {\n  private value: Computable | UnevaluatedMatrix;\n\n  constructor(value: Computable | UnevaluatedMatrix) {\n    super();\n    this.value = value;\n  }\n\n  public eval(): Computable {\n    // evaluate unevaluated matrix if not done already\n    if (UnevaluatedMatrix.isUnevaluatedMatrix(this.value)) {\n      this.value = this.value.evaluate();\n    }\n\n    return this.value;\n  }\n}\n\n/**\n * holds a unary operator\n */\nexport class UnaryOperatorNode extends ComputableNode {\n  private token: Token;\n  private next: ComputableNode;\n\n  constructor(token: Token, next: ComputableNode) {\n    super();\n    this.token = token;\n    this.next = next;\n  }\n\n  public eval(): Computable {\n    if (this.token.type == TokenType.plus) {\n      return this.next.eval();\n    } else if (this.token.type == TokenType.minus) {\n      return this.next.eval().mul(new Numeric(-1)).result;\n    } else {\n      throw new SymbolError(\n        \"unexpected unary operator: \" + this.token.type.toString()\n      );\n    }\n  }\n}\n\nexport function isComputableNode(node: AST): node is ComputableNode {\n  return node instanceof ComputableNode;\n}\n\nexport type AST = AbstractSyntaxTree;\nexport type CN = ComputableNode;\nexport type BinOp = BinaryOperatorNode;\nexport type SVN = SingleValueNode;\nexport type UnaryOp = UnaryOperatorNode;\n"]},"metadata":{},"sourceType":"module"}