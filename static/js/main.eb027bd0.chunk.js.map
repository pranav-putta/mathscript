{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","out","setOutput","formatMatrix","matrix","formatted","r","length","c","data","className","style","display","flexDirection","flex","onChange","evt","input","target","value","then","module","output","result","formatOutput","lib_interpret","catch","err","JSON","stringify","width","height","color","disabled","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAmGeA,MAjFf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACRC,EADQ,KACHC,EADG,KAGb,SAASC,EAAaC,GAGpB,IAFA,IAAIC,EAAY,IAEPC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IAAK,CAC7B,GAALA,IACFD,GAAa,KAEf,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAOE,GAAGC,OAAQC,IAAK,CACzC,IAAIC,EAAOL,EAAOE,GAAGE,GACjB,cAAeC,IACjBJ,GAAa,IAAMI,EAAI,UAAgB,KAGvCH,GAAKF,EAAOG,OAAS,IACvBF,GAAa,MAIjB,OADAA,GAAa,MAsBf,OACE,qBAAKK,UAAU,MAAf,SACE,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,KAAM,GAA3D,UACE,0BACEJ,UAAU,QACVK,SAAU,SAACC,GACT,IAAIC,EAAQD,EAAIE,OAAOC,MACvB,6BACGC,MAAK,SAACC,IA1BnB,SAAsBC,GACpB,IADmC,EAC/BjB,EAAY,GADmB,cAEhBiB,GAFgB,IAEnC,2BAA2B,CAAC,IAAnBC,EAAkB,QACzB,GAAI,OAAQA,EAAQ,CAClB,IAAId,EAAOc,EAAM,GAAN,KACP,cAAed,EACjBJ,GAAaI,EAAI,UAAgB,KACxB,WAAYA,IACrBJ,GAAaF,EAAaM,EAAI,cAGhCJ,GAAakB,EAAM,IAAN,MAAyB,MAXP,8BAenCrB,EAAUG,GAaEmB,CADWH,EAAOI,cAAcR,OAGjCS,OAAM,SAACC,GACNzB,EAAU0B,KAAKC,UAAUF,QAG/BhB,MAAO,CACLG,KAAM,EACNgB,MAAO,OACPC,OAAQ,OACRC,MAAO,WAGX,0BACEtB,UAAU,SACVuB,UAAU,EACVd,MAAOlB,EACPU,MAAO,CACLG,KAAM,EACNgB,MAAO,OACPC,OAAQ,OACRG,gBAAiB,iBC7EdC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eb027bd0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\ninterface Matrix {}\n\ninterface Primitive {}\ninterface Data {\n  data: Primitive | Matrix;\n}\ninterface Ok {\n  ok: Data;\n}\n\ninterface Err {\n  error: string;\n}\n\nfunction App() {\n  let [out, setOutput] = useState(\"\");\n\n  function formatMatrix(matrix: any[][]) {\n    let formatted = \"[\";\n\n    for (let r = 0; r < matrix.length; r++) {\n      if (r != 0) {\n        formatted += \" \";\n      }\n      for (let c = 0; c < matrix[r].length; c++) {\n        let data = matrix[r][c];\n        if (\"primitive\" in data) {\n          formatted += \" \" + data[\"primitive\"] + \" \";\n        }\n      }\n      if (r != matrix.length - 1) {\n        formatted += \"\\n\";\n      }\n    }\n    formatted += \"]\\n\";\n    return formatted;\n  }\n\n  function formatOutput(output: any[]) {\n    let formatted = \"\";\n    for (let result of output) {\n      if (\"Ok\" in result) {\n        let data = result[\"Ok\"][\"data\"];\n        if (\"primitive\" in data) {\n          formatted += data[\"primitive\"] + \"\\n\";\n        } else if (\"matrix\" in data) {\n          formatted += formatMatrix(data[\"matrix\"]);\n        }\n      } else {\n        formatted += result[\"Err\"][\"error\"] + \"\\n\";\n      }\n    }\n\n    setOutput(formatted);\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{ display: \"flex\", flexDirection: \"row\", flex: 1 }}>\n        <textarea\n          className=\"Input\"\n          onChange={(evt) => {\n            let input = evt.target.value;\n            import(\"wasm\")\n              .then((module) => {\n                let data = module.lib_interpret(input);\n                formatOutput(data);\n              })\n              .catch((err) => {\n                setOutput(JSON.stringify(err));\n              });\n          }}\n          style={{\n            flex: 2,\n            width: \"100%\",\n            height: \"100%\",\n            color: \"white\",\n          }}\n        />\n        <textarea\n          className=\"Output\"\n          disabled={true}\n          value={out}\n          style={{\n            flex: 1,\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: \"white\",\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}