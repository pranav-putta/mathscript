{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","out","setOutput","disassembly_out","setDisassemblyOut","className","style","display","flexDirection","flex","onChange","evt","input","target","value","then","module","data","lib_interpret","output","disassembly","forEach","str","format_disassembly","el","format_result","catch","err","JSON","stringify","width","height","color","disabled","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAsFeA,MAzDf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACRC,EADQ,KACHC,EADG,OAE8BF,mBAAS,IAFvC,mBAERG,EAFQ,KAESC,EAFT,KAIb,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,KAAM,GAA3D,UACE,0BACEJ,UAAU,QACVK,SAAU,SAACC,GACT,IAAIC,EAAQD,EAAIE,OAAOC,MACvB,6BACGC,MAAK,SAACC,GACL,IAAIC,EAAwBD,EAAOE,cAAcN,GACjDR,EAhChB,SAA4Ba,GAC1B,IAAIE,EAAS,GAKb,OAJAF,EAAKG,YAAYC,SAAQ,SAACC,GACxBH,GAAUG,KAGLH,EA0ByBI,CAAmBN,IACrCf,EAxBhB,SAAuBe,GACrB,IAAIE,EAAS,GAKb,OAJAF,EAAKE,OAAOE,SAAQ,SAAAG,GAClBL,GAAUK,EAAG,GAAK,QAGbL,EAkBiBM,CAAcR,OAEzBS,OAAM,SAACC,GACNzB,EAAU0B,KAAKC,UAAUF,QAG/BrB,MAAO,CACLG,KAAM,EACNqB,MAAO,OACPC,OAAQ,OACRC,MAAO,WAIX,sBAAK1B,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,KAAM,GAA9D,UACE,0BACEJ,UAAU,SACV4B,UAAU,EACVnB,MAAOb,EACPK,MAAO,CACLG,KAAM,EACNqB,MAAO,OACPC,OAAQ,OACRG,gBAAiB,WAGrB,0BACE7B,UAAU,cACV4B,UAAU,EACVnB,MAAOX,EACPG,MAAO,CACLG,KAAM,EACNqB,MAAO,OACPC,OAAQ,mBC/DPI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.db41b891.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\ninterface InterpretOutput {\n  disassembly: string[];\n  asm: number[];\n  output: [number, string][];\n  result: any;\n}\n\nfunction format_disassembly(data: InterpretOutput) {\n  let output = \"\";\n  data.disassembly.forEach((str) => {\n    output += str;\n  });\n\n  return output;\n}\n\nfunction format_result(data: InterpretOutput) {\n  let output = \"\";\n  data.output.forEach(el => {\n    output += el[1] + \"\\n\";\n  });\n\n  return output;\n}\n\nfunction App() {\n  let [out, setOutput] = useState(\"\");\n  let [disassembly_out, setDisassemblyOut] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <div style={{ display: \"flex\", flexDirection: \"row\", flex: 1 }}>\n        <textarea\n          className=\"Input\"\n          onChange={(evt) => {\n            let input = evt.target.value;\n            import(\"wasm\")\n              .then((module) => {\n                let data: InterpretOutput = module.lib_interpret(input);\n                setDisassemblyOut(format_disassembly(data));\n                setOutput(format_result(data));\n              })\n              .catch((err) => {\n                setOutput(JSON.stringify(err));\n              });\n          }}\n          style={{\n            flex: 2,\n            width: \"100%\",\n            height: \"100%\",\n            color: \"white\",\n          }}\n        />\n\n        <div style={{ display: \"flex\", flexDirection: \"column\", flex: 1 }}>\n          <textarea\n            className=\"Output\"\n            disabled={true}\n            value={out}\n            style={{\n              flex: 1,\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: \"white\",\n            }}\n          />\n          <textarea\n            className=\"Disassembly\"\n            disabled={true}\n            value={disassembly_out}\n            style={{\n              flex: 1,\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}