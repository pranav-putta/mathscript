{"ast":null,"code":"import { ArithmeticError } from \"./errors\";\n/**\n * checks if given text contains only whitespace\n * @param text input character\n */\n\nexport function isspace(text) {\n  return text == \" \" || text == \"\\t\";\n}\n/**\n * checks if given text is an alphanumeric\n * @param text input character\n */\n\nexport function isalnum(text) {\n  return text.match(/^[a-z0-9]+$/i) !== null;\n}\n/**\n * checks if given text contains a digit\n * @param text input character\n */\n\nexport function isdigit(text) {\n  return !isNaN(parseInt(text));\n}\n/**\n * returns the positive modulo of the two numbers\n * @param a first integer\n * @param b second integer\n */\n\nexport function mod(a, b) {\n  if (Number.isInteger(b)) {\n    let out = a % b;\n    return out >= 0 ? out : out + b;\n  }\n\n  throw new ArithmeticError(\"expected an integer for mod\");\n}\n/**\n * circular array backed queue implementation\n */\n\nexport class Queue {\n  constructor() {\n    this.data = void 0;\n    this._size = void 0;\n    this.front = void 0;\n    this.INITIAL_CAPACITY = 9;\n    this.data = new Array(this.INITIAL_CAPACITY);\n    this._size = 0;\n    this.front = 0;\n  }\n\n  get size() {\n    return this._size;\n  }\n  /**\n   * inserts all data in array to the back of the queue\n   * @param data data array to insert\n   */\n\n\n  pushAll(data) {\n    data.forEach(val => {\n      this.push(val);\n    });\n  }\n  /**\n   * inserts data into back of queue\n   * @param data data to insert\n   */\n\n\n  push(data) {\n    if (this._size == this.data.length) {\n      let temp = new Array(this.size * 2);\n      temp[0] = data;\n\n      for (var i = 0; i < this.size; i++) {\n        temp[i + 1] = this.data[(this.front + i) % this.size];\n      }\n\n      this.data = temp;\n      this.front = 0;\n    } else {\n      this.data[(this.front + this._size) % this.data.length] = data;\n    }\n\n    this._size++;\n  }\n  /**\n   * returns next element in queue\n   * @returns E if object found, undefined otherwise\n   */\n\n\n  peek() {\n    if (this.size > 0) {\n      return this.data[this.front];\n    }\n\n    return undefined;\n  }\n  /**\n   * removes current element in queue and returns\n   * @returns E if object found, undefined otherwise\n   */\n\n\n  pop() {\n    if (this.size > 0) {\n      let out = this.data[this.front];\n      this.front = (this.front + 1) % this.data.length;\n      this._size--;\n      return out;\n    }\n\n    return undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/util.ts"],"names":["ArithmeticError","isspace","text","isalnum","match","isdigit","isNaN","parseInt","mod","a","b","Number","isInteger","out","Queue","constructor","data","_size","front","INITIAL_CAPACITY","Array","size","pushAll","forEach","val","push","length","temp","i","peek","undefined","pop"],"mappings":"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","sourcesContent":["import { ArithmeticError } from \"./errors\";\n\n/**\n * checks if given text contains only whitespace\n * @param text input character\n */\nexport function isspace(text: string): boolean {\n  return text == \" \" || text == \"\\t\";\n}\n\n/**\n * checks if given text is an alphanumeric\n * @param text input character\n */\nexport function isalnum(text: string): boolean {\n  return text.match(/^[a-z0-9]+$/i) !== null;\n}\n\n/**\n * checks if given text contains a digit\n * @param text input character\n */\nexport function isdigit(text: string): boolean {\n  return !isNaN(parseInt(text));\n}\n\n/**\n * returns the positive modulo of the two numbers\n * @param a first integer\n * @param b second integer\n */\nexport function mod(a: number, b: number): number {\n  if (Number.isInteger(b)) {\n    let out = a % b;\n\n    return out >= 0 ? out : out + b;\n  }\n\n  throw new ArithmeticError(\"expected an integer for mod\");\n}\n\n/**\n * circular array backed queue implementation\n */\nexport class Queue<E> {\n  private data: E[];\n  private _size: number;\n  private front: number;\n\n  private readonly INITIAL_CAPACITY = 9;\n\n  constructor() {\n    this.data = new Array(this.INITIAL_CAPACITY);\n    this._size = 0;\n    this.front = 0;\n  }\n\n  public get size(): number {\n    return this._size;\n  }\n\n  /**\n   * inserts all data in array to the back of the queue\n   * @param data data array to insert\n   */\n  public pushAll(data: E[]) {\n    data.forEach((val: E) => {\n      this.push(val);\n    });\n  }\n\n  /**\n   * inserts data into back of queue\n   * @param data data to insert\n   */\n  public push(data: E) {\n    if (this._size == this.data.length) {\n      let temp: E[] = new Array(this.size * 2);\n      temp[0] = data;\n      for (var i = 0; i < this.size; i++) {\n        temp[i + 1] = this.data[(this.front + i) % this.size];\n      }\n      this.data = temp;\n      this.front = 0;\n    } else {\n      this.data[(this.front + this._size) % this.data.length] = data;\n    }\n    this._size++;\n  }\n\n  /**\n   * returns next element in queue\n   * @returns E if object found, undefined otherwise\n   */\n  public peek(): E | undefined {\n    if (this.size > 0) {\n      return this.data[this.front];\n    }\n\n    return undefined;\n  }\n\n  /**\n   * removes current element in queue and returns\n   * @returns E if object found, undefined otherwise\n   */\n  public pop(): E | undefined {\n    if (this.size > 0) {\n      let out: E = this.data[this.front];\n      this.front = (this.front + 1) % this.data.length;\n      this._size--;\n      return out;\n    }\n\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}