{"ast":null,"code":"import { Computable } from \"./computable\";\nimport { ArithmeticError } from \"../errors\";\nexport class Numeric extends Computable {\n  constructor(val) {\n    super();\n    this.value = void 0;\n    this.value = val;\n  }\n\n  error() {\n    throw new ArithmeticError(\"cannot add numeric with non-numeric\");\n  }\n\n  add(other) {\n    if (other.isNumeric()) {\n      return {\n        result: new Numeric(this.value + other.value)\n      };\n    } else if (other.isMatrix()) {\n      return other.add(this);\n    }\n\n    this.error();\n  }\n\n  sub(other) {\n    if (other.isNumeric()) {\n      return {\n        result: new Numeric(this.value - other.value)\n      };\n    } else if (other.isMatrix()) {\n      return other.sub(this);\n    }\n\n    this.error();\n  }\n\n  mul(other) {\n    if (other.isNumeric()) {\n      return {\n        result: new Numeric(this.value * other.value)\n      };\n    } else if (other.isMatrix()) {\n      return other.mul(this);\n    }\n\n    this.error();\n  }\n\n  div(other) {\n    if (other.isNumeric()) {\n      return {\n        result: new Numeric(this.value / other.value)\n      };\n    } else if (other.isMatrix()) {\n      return other.div(this);\n    }\n\n    this.error();\n  }\n\n  rdiv(other) {\n    if (other.isNumeric()) {\n      return {\n        result: new Numeric(Math.floor(this.value / other.value))\n      };\n    } else if (other.isMatrix()) {\n      return other.rdiv(this);\n    }\n\n    this.error();\n  }\n\n  pow(other) {\n    if (other.isNumeric()) {\n      return {\n        result: new Numeric(Math.pow(this.value, other.value))\n      };\n    }\n\n    this.error();\n  }\n\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/computable/numeric.ts"],"names":["Computable","ArithmeticError","Numeric","constructor","val","value","error","add","other","isNumeric","result","isMatrix","sub","mul","div","rdiv","Math","floor","pow"],"mappings":"AAAA,SAASA,UAAT,QAAmC,cAAnC;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA,OAAO,MAAMC,OAAN,SAAsBF,UAAtB,CAAiC;AAGtCG,EAAAA,WAAW,CAACC,GAAD,EAAc;AACvB;AADuB,SAFzBC,KAEyB;AAEvB,SAAKA,KAAL,GAAaD,GAAb;AACD;;AAEOE,EAAAA,KAAR,GAAuB;AACrB,UAAM,IAAIL,eAAJ,CAAoB,qCAApB,CAAN;AACD;;AAEMM,EAAAA,GAAP,CAAWC,KAAX,EAAsC;AACpC,QAAIA,KAAK,CAACC,SAAN,EAAJ,EAAuB;AACrB,aAAO;AAAEC,QAAAA,MAAM,EAAE,IAAIR,OAAJ,CAAY,KAAKG,KAAL,GAAaG,KAAK,CAACH,KAA/B;AAAV,OAAP;AACD,KAFD,MAEO,IAAIG,KAAK,CAACG,QAAN,EAAJ,EAAsB;AAC3B,aAAOH,KAAK,CAACD,GAAN,CAAU,IAAV,CAAP;AACD;;AACD,SAAKD,KAAL;AACD;;AAEMM,EAAAA,GAAP,CAAWJ,KAAX,EAAsC;AACpC,QAAIA,KAAK,CAACC,SAAN,EAAJ,EAAuB;AACrB,aAAO;AAAEC,QAAAA,MAAM,EAAE,IAAIR,OAAJ,CAAY,KAAKG,KAAL,GAAaG,KAAK,CAACH,KAA/B;AAAV,OAAP;AACD,KAFD,MAEO,IAAIG,KAAK,CAACG,QAAN,EAAJ,EAAsB;AAC3B,aAAOH,KAAK,CAACI,GAAN,CAAU,IAAV,CAAP;AACD;;AACD,SAAKN,KAAL;AACD;;AAEMO,EAAAA,GAAP,CAAWL,KAAX,EAAsC;AACpC,QAAIA,KAAK,CAACC,SAAN,EAAJ,EAAuB;AACrB,aAAO;AAAEC,QAAAA,MAAM,EAAE,IAAIR,OAAJ,CAAY,KAAKG,KAAL,GAAaG,KAAK,CAACH,KAA/B;AAAV,OAAP;AACD,KAFD,MAEO,IAAIG,KAAK,CAACG,QAAN,EAAJ,EAAsB;AAC3B,aAAOH,KAAK,CAACK,GAAN,CAAU,IAAV,CAAP;AACD;;AACD,SAAKP,KAAL;AACD;;AAEMQ,EAAAA,GAAP,CAAWN,KAAX,EAAsC;AACpC,QAAIA,KAAK,CAACC,SAAN,EAAJ,EAAuB;AACrB,aAAO;AAAEC,QAAAA,MAAM,EAAE,IAAIR,OAAJ,CAAY,KAAKG,KAAL,GAAaG,KAAK,CAACH,KAA/B;AAAV,OAAP;AACD,KAFD,MAEO,IAAIG,KAAK,CAACG,QAAN,EAAJ,EAAsB;AAC3B,aAAOH,KAAK,CAACM,GAAN,CAAU,IAAV,CAAP;AACD;;AACD,SAAKR,KAAL;AACD;;AAEMS,EAAAA,IAAP,CAAYP,KAAZ,EAAuC;AACrC,QAAIA,KAAK,CAACC,SAAN,EAAJ,EAAuB;AACrB,aAAO;AAAEC,QAAAA,MAAM,EAAE,IAAIR,OAAJ,CAAYc,IAAI,CAACC,KAAL,CAAW,KAAKZ,KAAL,GAAaG,KAAK,CAACH,KAA9B,CAAZ;AAAV,OAAP;AACD,KAFD,MAEO,IAAIG,KAAK,CAACG,QAAN,EAAJ,EAAsB;AAC3B,aAAOH,KAAK,CAACO,IAAN,CAAW,IAAX,CAAP;AACD;;AACD,SAAKT,KAAL;AACD;;AAEMY,EAAAA,GAAP,CAAWV,KAAX,EAAsC;AACpC,QAAIA,KAAK,CAACC,SAAN,EAAJ,EAAuB;AACrB,aAAO;AAAEC,QAAAA,MAAM,EAAE,IAAIR,OAAJ,CAAYc,IAAI,CAACE,GAAL,CAAS,KAAKb,KAAd,EAAqBG,KAAK,CAACH,KAA3B,CAAZ;AAAV,OAAP;AACD;;AACD,SAAKC,KAAL;AACD;;AA9DqC","sourcesContent":["import { Computable, Result } from \"./computable\";\nimport { ArithmeticError } from \"../errors\";\n\nexport class Numeric extends Computable {\n  value: number;\n\n  constructor(val: number) {\n    super();\n    this.value = val;\n  }\n\n  private error(): never {\n    throw new ArithmeticError(\"cannot add numeric with non-numeric\");\n  }\n\n  public add(other: Computable): Result {\n    if (other.isNumeric()) {\n      return { result: new Numeric(this.value + other.value) };\n    } else if (other.isMatrix()) {\n      return other.add(this);\n    }\n    this.error();\n  }\n\n  public sub(other: Computable): Result {\n    if (other.isNumeric()) {\n      return { result: new Numeric(this.value - other.value) };\n    } else if (other.isMatrix()) {\n      return other.sub(this);\n    }\n    this.error();\n  }\n\n  public mul(other: Computable): Result {\n    if (other.isNumeric()) {\n      return { result: new Numeric(this.value * other.value) };\n    } else if (other.isMatrix()) {\n      return other.mul(this);\n    }\n    this.error();\n  }\n\n  public div(other: Computable): Result {\n    if (other.isNumeric()) {\n      return { result: new Numeric(this.value / other.value) };\n    } else if (other.isMatrix()) {\n      return other.div(this);\n    }\n    this.error();\n  }\n\n  public rdiv(other: Computable): Result {\n    if (other.isNumeric()) {\n      return { result: new Numeric(Math.floor(this.value / other.value)) };\n    } else if (other.isMatrix()) {\n      return other.rdiv(this);\n    }\n    this.error();\n  }\n\n  public pow(other: Computable): Result {\n    if (other.isNumeric()) {\n      return { result: new Numeric(Math.pow(this.value, other.value)) };\n    }\n    this.error();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}