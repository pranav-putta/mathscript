{"ast":null,"code":"import { Computable } from \"./computable\";\nimport { ArgumentError } from \"./errors\";\n/**\n * takes rref and stores into matrix\n * @param node\n */\n\nexport function rref(node) {\n  let matrix = node.eval();\n\n  if (Computable.isMatrix(matrix) && matrix.matrix) {\n    var lead = 0;\n\n    for (var k = 0; k < matrix.dimR; k++) {\n      if (matrix.dimC <= lead) return matrix;\n      var i = k;\n\n      while (matrix.matrix[i][lead] === 0) {\n        i++;\n\n        if (matrix.dimR === i) {\n          i = k;\n          lead++;\n          if (matrix.dimC === lead) return matrix;\n        }\n      }\n\n      var irow = matrix.matrix[i],\n          krow = matrix.matrix[k];\n      matrix.matrix[i] = krow;\n      matrix.matrix[k] = irow;\n      var val = matrix.matrix[k][lead];\n\n      for (var j = 0; j < matrix.dimC; j++) {\n        matrix.matrix[k][j] /= val;\n      }\n\n      for (var i = 0; i < matrix.dimR; i++) {\n        if (i === k) continue;\n        val = matrix.matrix[i][lead];\n\n        for (var j = 0; j < matrix.dimC; j++) {\n          matrix.matrix[i][j] -= val * matrix.matrix[k][j];\n        }\n      }\n\n      lead++;\n    }\n\n    return matrix;\n  } else {\n    throw new ArgumentError(\"expected a matrix.\");\n  }\n}\n/**\n * takes transpose and stores into matrix\n * @param node\n */\n\nexport function transpose(node) {\n  let matrix = node.eval();\n\n  if (Computable.isMatrix(matrix)) {\n    return matrix.transpose(true).result;\n  } else {\n    throw new ArgumentError(\"expected a matrix\");\n  }\n}\n/**\n * takes determinant\n * @param node\n */\n\nexport function det(node) {\n  let matrix = node.eval();\n\n  if (Computable.isMatrix(matrix)) {\n    return matrix.determinant();\n  } else {\n    throw new ArgumentError(\"expected a matrix\");\n  }\n}\nexport function sqrt(node) {\n  let num = node.eval();\n\n  if (Computable.isNumeric(num)) {\n    return Math.sqrt(num.value);\n  } else {\n    throw new ArgumentError(\"expected a square root\");\n  }\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/functions.ts"],"names":["Computable","ArgumentError","rref","node","matrix","eval","isMatrix","lead","k","dimR","dimC","i","irow","krow","val","j","transpose","result","det","determinant","sqrt","num","isNumeric","Math","value"],"mappings":"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","sourcesContent":["import { AST } from \"./ast\";\nimport { Computable } from \"./computable\";\nimport { ArgumentError } from \"./errors\";\n\n/**\n * takes rref and stores into matrix\n * @param node\n */\nexport function rref(node: AST) {\n  let matrix = node.eval();\n  if (Computable.isMatrix(matrix) && matrix.matrix) {\n    var lead = 0;\n    for (var k = 0; k < matrix.dimR; k++) {\n      if (matrix.dimC <= lead) return matrix;\n\n      var i = k;\n      while (matrix.matrix[i][lead] === 0) {\n        i++;\n        if (matrix.dimR === i) {\n          i = k;\n          lead++;\n          if (matrix.dimC === lead) return matrix;\n        }\n      }\n      var irow = matrix.matrix[i],\n        krow = matrix.matrix[k];\n      matrix.matrix[i] = krow;\n      matrix.matrix[k] = irow;\n\n      var val = matrix.matrix[k][lead];\n      for (var j = 0; j < matrix.dimC; j++) {\n        matrix.matrix[k][j] /= val;\n      }\n\n      for (var i = 0; i < matrix.dimR; i++) {\n        if (i === k) continue;\n        val = matrix.matrix[i][lead];\n        for (var j = 0; j < matrix.dimC; j++) {\n          matrix.matrix[i][j] -= val * matrix.matrix[k][j];\n        }\n      }\n      lead++;\n    }\n    return matrix;\n  } else {\n    throw new ArgumentError(\"expected a matrix.\");\n  }\n}\n\n/**\n * takes transpose and stores into matrix\n * @param node\n */\nexport function transpose(node: AST) {\n  let matrix = node.eval();\n  if (Computable.isMatrix(matrix)) {\n    return matrix.transpose(true).result;\n  } else {\n    throw new ArgumentError(\"expected a matrix\");\n  }\n}\n\n/**\n * takes determinant\n * @param node\n */\nexport function det(node: AST) {\n  let matrix = node.eval();\n  if (Computable.isMatrix(matrix)) {\n    return matrix.determinant();\n  } else {\n    throw new ArgumentError(\"expected a matrix\");\n  }\n}\n\nexport function sqrt(node: AST) {\n  let num = node.eval();\n  if (Computable.isNumeric(num)) {\n    return Math.sqrt(num.value);\n  } else {\n    throw new ArgumentError(\"expected a square root\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}