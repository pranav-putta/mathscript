{"ast":null,"code":"/**\n * supported token characters\n */\nvar TokenType;\n/**\n * holds a token of type with value\n * should not be used on its own, rather use aliases @type{SymbolToken, NumericToken, MatrixToken}\n */\n\n(function (TokenType) {\n  TokenType[\"num\"] = \"num\";\n  TokenType[\"plus\"] = \"+\";\n  TokenType[\"minus\"] = \"-\";\n  TokenType[\"mul\"] = \"*\";\n  TokenType[\"pow\"] = \"^\";\n  TokenType[\"div\"] = \"/\";\n  TokenType[\"rdiv\"] = \"//\";\n  TokenType[\"lparen\"] = \"(\";\n  TokenType[\"rparen\"] = \")\";\n  TokenType[\"lbracket\"] = \"[\";\n  TokenType[\"rbracket\"] = \"]\";\n  TokenType[\"larrow\"] = \"<\";\n  TokenType[\"rarrow\"] = \">\";\n  TokenType[\"semicolon\"] = \";\";\n  TokenType[\"comma\"] = \",\";\n  TokenType[\"space\"] = \"~\";\n  TokenType[\"assign\"] = \"=\";\n  TokenType[\"bar\"] = \"|\";\n  TokenType[\"dot\"] = \".\";\n  TokenType[\"endl\"] = \"\\n\";\n  TokenType[\"id\"] = \"id\";\n  TokenType[\"eof\"] = \"eof\";\n})(TokenType || (TokenType = {}));\n\n// generated tokens\nexport let plus_token = {\n  type: TokenType.plus,\n  value: TokenType.plus.toString()\n};\nexport let minus_token = {\n  type: TokenType.minus,\n  value: TokenType.minus.toString()\n};\nexport let mul_token = {\n  type: TokenType.mul,\n  value: TokenType.mul.toString()\n};\nexport let div_token = {\n  type: TokenType.div,\n  value: TokenType.div.toString()\n};\nexport let lparen_token = {\n  type: TokenType.lparen,\n  value: TokenType.lparen.toString()\n};\nexport let rparen_token = {\n  type: TokenType.rparen,\n  value: TokenType.rparen.toString()\n};\nexport let lbracket_token = {\n  type: TokenType.lbracket,\n  value: TokenType.lbracket.toString()\n};\nexport let rbracket_token = {\n  type: TokenType.rbracket,\n  value: TokenType.rbracket.toString()\n};\nexport let comma_token = {\n  type: TokenType.comma,\n  value: TokenType.comma.toString()\n};\nexport let semicolon_token = {\n  type: TokenType.semicolon,\n  value: TokenType.semicolon.toString()\n};\nexport let eof_token = {\n  type: TokenType.eof,\n  value: TokenType.eof.toString()\n};\nexport let bar_token = {\n  type: TokenType.bar,\n  value: TokenType.bar.toString()\n};\nexport let assign_token = {\n  type: TokenType.assign,\n  value: TokenType.assign.toString()\n};\nexport let dot_token = {\n  type: TokenType.dot,\n  value: TokenType.dot.toString()\n};\nexport let endl_token = {\n  type: TokenType.endl,\n  value: TokenType.endl.toString()\n};\nexport let id_token = {\n  type: TokenType.id,\n  value: TokenType.id.toString()\n};\nexport let rdiv_token = {\n  type: TokenType.rdiv,\n  value: TokenType.rdiv.toString()\n};\nexport let larrow_token = {\n  type: TokenType.larrow,\n  value: TokenType.larrow.toString()\n};\nexport let rarrow_token = {\n  type: TokenType.rarrow,\n  value: TokenType.rarrow.toString()\n};\nexport let pow_token = {\n  type: TokenType.pow,\n  value: TokenType.pow.toString()\n};\n\nfunction isSymbolToken(token) {\n  return typeof token.value === \"string\";\n}\n\nfunction isNumericToken(token) {\n  return typeof token.value === \"number\" && token.type == TokenType.num;\n}\n\nexport { TokenType, isSymbolToken, isNumericToken };","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/token.ts"],"names":["TokenType","plus_token","type","plus","value","toString","minus_token","minus","mul_token","mul","div_token","div","lparen_token","lparen","rparen_token","rparen","lbracket_token","lbracket","rbracket_token","rbracket","comma_token","comma","semicolon_token","semicolon","eof_token","eof","bar_token","bar","assign_token","assign","dot_token","dot","endl_token","endl","id_token","id","rdiv_token","rdiv","larrow_token","larrow","rarrow_token","rarrow","pow_token","pow","isSymbolToken","token","isNumericToken","num"],"mappings":"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","sourcesContent":["/**\n * supported token characters\n */\nenum TokenType {\n  num = \"num\",\n  plus = \"+\",\n  minus = \"-\",\n  mul = \"*\",\n  pow = \"^\",\n  div = \"/\",\n  rdiv = \"//\",\n  lparen = \"(\",\n  rparen = \")\",\n  lbracket = \"[\",\n  rbracket = \"]\",\n  larrow = \"<\",\n  rarrow = \">\",\n  semicolon = \";\",\n  comma = \",\",\n  space = \"~\",\n  assign = \"=\",\n  bar = \"|\",\n  dot = \".\",\n  endl = \"\\n\",\n  id = \"id\",\n  eof = \"eof\",\n}\n\n/**\n * holds a token of type with value\n * should not be used on its own, rather use aliases @type{SymbolToken, NumericToken, MatrixToken}\n */\ninterface IToken<E> {\n  type: TokenType;\n  value: E;\n}\n\n/**\n * token holds a symbol like +, -, *, /, etc.\n */\ntype SymbolToken = IToken<string>;\n/**\n * token holds a numeric value\n */\ntype NumericToken = IToken<number>;\n\n/**\n * supported tokens\n */\ntype Token = SymbolToken | NumericToken;\n\n// generated tokens\nexport let plus_token: SymbolToken = {\n  type: TokenType.plus,\n  value: TokenType.plus.toString(),\n};\nexport let minus_token: SymbolToken = {\n  type: TokenType.minus,\n  value: TokenType.minus.toString(),\n};\nexport let mul_token: SymbolToken = {\n  type: TokenType.mul,\n  value: TokenType.mul.toString(),\n};\nexport let div_token: SymbolToken = {\n  type: TokenType.div,\n  value: TokenType.div.toString(),\n};\nexport let lparen_token: SymbolToken = {\n  type: TokenType.lparen,\n  value: TokenType.lparen.toString(),\n};\nexport let rparen_token: SymbolToken = {\n  type: TokenType.rparen,\n  value: TokenType.rparen.toString(),\n};\nexport let lbracket_token: SymbolToken = {\n  type: TokenType.lbracket,\n  value: TokenType.lbracket.toString(),\n};\nexport let rbracket_token: SymbolToken = {\n  type: TokenType.rbracket,\n  value: TokenType.rbracket.toString(),\n};\nexport let comma_token: SymbolToken = {\n  type: TokenType.comma,\n  value: TokenType.comma.toString(),\n};\nexport let semicolon_token: SymbolToken = {\n  type: TokenType.semicolon,\n  value: TokenType.semicolon.toString(),\n};\nexport let eof_token: SymbolToken = {\n  type: TokenType.eof,\n  value: TokenType.eof.toString(),\n};\nexport let bar_token: SymbolToken = {\n  type: TokenType.bar,\n  value: TokenType.bar.toString(),\n};\nexport let assign_token: SymbolToken = {\n  type: TokenType.assign,\n  value: TokenType.assign.toString(),\n};\nexport let dot_token: SymbolToken = {\n  type: TokenType.dot,\n  value: TokenType.dot.toString(),\n};\nexport let endl_token: SymbolToken = {\n  type: TokenType.endl,\n  value: TokenType.endl.toString(),\n};\nexport let id_token: SymbolToken = {\n  type: TokenType.id,\n  value: TokenType.id.toString(),\n};\nexport let rdiv_token: SymbolToken = {\n  type: TokenType.rdiv,\n  value: TokenType.rdiv.toString(),\n};\nexport let larrow_token: SymbolToken = {\n  type: TokenType.larrow,\n  value: TokenType.larrow.toString()\n};\nexport let rarrow_token: SymbolToken = {\n  type: TokenType.rarrow,\n  value: TokenType.rarrow.toString()\n}\nexport let pow_token: SymbolToken = {\n  type: TokenType.pow,\n  value: TokenType.pow.toString()\n}\n\nfunction isSymbolToken(token: Token): token is SymbolToken {\n  return typeof token.value === \"string\";\n}\n\nfunction isNumericToken(token: Token): token is NumericToken {\n  return typeof token.value === \"number\" && token.type == TokenType.num;\n}\n\nexport {\n  Token,\n  TokenType,\n  SymbolToken,\n  NumericToken,\n  isSymbolToken,\n  isNumericToken,\n};\n"]},"metadata":{},"sourceType":"module"}