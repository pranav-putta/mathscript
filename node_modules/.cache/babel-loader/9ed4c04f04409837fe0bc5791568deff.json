{"ast":null,"code":"import { ArithmeticError } from \"../errors\";\nimport { TokenType } from \"../token\";\nexport class Computable {\n  static compute(a, b, operator) {\n    switch (operator) {\n      case TokenType.plus:\n        return a.add(b);\n\n      case TokenType.minus:\n        return a.sub(b);\n\n      case TokenType.mul:\n        return a.mul(b);\n\n      case TokenType.div:\n        return a.div(b);\n\n      case TokenType.rdiv:\n        return a.rdiv(b);\n\n      default:\n        throw new ArithmeticError(\"unsupported operation: \" + operator);\n    }\n  }\n\n}\n/**\n * checks if given element is of type computable\n * @param el any element\n */\n\nexport function isComputable(el) {\n  return el instanceof Computable;\n}\nexport { Matrix, UnevaluatedMatrix, isMatrix } from \"./matrix\";\nexport { Numeric, isNumeric } from \"./numeric\";\nexport { Logical, isLogical } from \"./logical\";","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/computable/index.ts"],"names":["ArithmeticError","TokenType","Computable","compute","a","b","operator","plus","add","minus","sub","mul","div","rdiv","isComputable","el","Matrix","UnevaluatedMatrix","isMatrix","Numeric","isNumeric","Logical","isLogical"],"mappings":"AAAA,SAASA,eAAT,QAAgC,WAAhC;AACA,SAASC,SAAT,QAA0B,UAA1B;AAOA,OAAO,MAAeC,UAAf,CAA0B;AAQ/B,SAAcC,OAAd,CACEC,CADF,EAEEC,CAFF,EAGEC,QAHF,EAIU;AACR,YAAQA,QAAR;AACE,WAAKL,SAAS,CAACM,IAAf;AACE,eAAOH,CAAC,CAACI,GAAF,CAAMH,CAAN,CAAP;;AACF,WAAKJ,SAAS,CAACQ,KAAf;AACE,eAAOL,CAAC,CAACM,GAAF,CAAML,CAAN,CAAP;;AACF,WAAKJ,SAAS,CAACU,GAAf;AACE,eAAOP,CAAC,CAACO,GAAF,CAAMN,CAAN,CAAP;;AACF,WAAKJ,SAAS,CAACW,GAAf;AACE,eAAOR,CAAC,CAACQ,GAAF,CAAMP,CAAN,CAAP;;AACF,WAAKJ,SAAS,CAACY,IAAf;AACE,eAAOT,CAAC,CAACS,IAAF,CAAOR,CAAP,CAAP;;AACF;AACE,cAAM,IAAIL,eAAJ,CAAoB,4BAA4BM,QAAhD,CAAN;AAZJ;AAcD;;AA3B8B;AA8BjC;;;;;AAIA,OAAO,SAASQ,YAAT,CAAsBC,EAAtB,EAAiD;AACtD,SAAOA,EAAE,YAAYb,UAArB;AACD;AAED,SAASc,MAAT,EAAiBC,iBAAjB,EAAoCC,QAApC,QAAoD,UAApD;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,WAAnC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,WAAnC","sourcesContent":["import { ArithmeticError } from \"../errors\";\nimport { TokenType } from \"../token\";\n\nexport interface Result {\n  result: Computable;\n  message?: string;\n}\n\nexport abstract class Computable {\n  public abstract add(other: Computable): Result;\n  public abstract sub(other: Computable): Result;\n  public abstract mul(other: Computable): Result;\n  public abstract div(other: Computable): Result;\n  public abstract rdiv(other: Computable): Result;\n  public abstract pow(other: Computable): Result;\n\n  public static compute(\n    a: Computable,\n    b: Computable,\n    operator: TokenType\n  ): Result {\n    switch (operator) {\n      case TokenType.plus:\n        return a.add(b);\n      case TokenType.minus:\n        return a.sub(b);\n      case TokenType.mul:\n        return a.mul(b);\n      case TokenType.div:\n        return a.div(b);\n      case TokenType.rdiv:\n        return a.rdiv(b);\n      default:\n        throw new ArithmeticError(\"unsupported operation: \" + operator);\n    }\n  }\n}\n\n/**\n * checks if given element is of type computable\n * @param el any element\n */\nexport function isComputable(el: any): el is Computable {\n  return el instanceof Computable;\n}\n\nexport { Matrix, UnevaluatedMatrix, isMatrix } from \"./matrix\";\nexport { Numeric, isNumeric } from \"./numeric\";\nexport { Logical, isLogical } from \"./logical\";\n"]},"metadata":{},"sourceType":"module"}