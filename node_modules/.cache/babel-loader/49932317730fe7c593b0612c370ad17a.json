{"ast":null,"code":"import { Computable, Numeric } from \".\";\nimport { ArithmeticError } from \"../errors\";\n/**\n * boolean computable value\n */\n\nexport class Boolean extends Computable {\n  constructor(value) {\n    super();\n    this.boolVal = void 0;\n    this.boolVal = value;\n  }\n\n  add(other) {\n    return other.add(new Numeric(0));\n  }\n\n  sub(other) {\n    return other.add(new Numeric(0 * -1));\n  }\n\n  mul(other) {\n    return other.mul(new Numeric(0));\n  }\n\n  div(other) {\n    throw new ArithmeticError(\"boolean division is not supported\");\n  }\n\n  rdiv(other) {\n    throw new ArithmeticError(\"boolean division is not supported\");\n  }\n\n  pow(other) {\n    throw new ArithmeticError(\"boolean powers not supported\");\n  }\n\n  or(other) {\n    return {\n      result: new Boolean(this.boolVal || other.boolVal)\n    };\n  }\n\n  and(other) {\n    return {\n      result: new Boolean(this.boolVal && other.boolVal)\n    };\n  }\n\n  xor(other) {\n    return {\n      result: new Boolean(this.boolVal !== other.boolVal)\n    };\n  }\n\n  nand(other) {\n    return {\n      result: new Boolean(this.boolVal == other.boolVal && !this.boolVal)\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/computable/boolean.ts"],"names":["Computable","Numeric","ArithmeticError","Boolean","constructor","value","boolVal","add","other","sub","mul","div","rdiv","pow","or","result","and","xor","nand"],"mappings":"AAAA,SAAwBA,UAAxB,EAAoCC,OAApC,QAA2D,GAA3D;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA;;;;AAGA,OAAO,MAAMC,OAAN,SAAsBH,UAAtB,CAAiC;AAGtCI,EAAAA,WAAW,CAACC,KAAD,EAAiB;AAC1B;AAD0B,SAFpBC,OAEoB;AAE1B,SAAKA,OAAL,GAAeD,KAAf;AACD;;AAEME,EAAAA,GAAP,CAAWC,KAAX,EAAsC;AACpC,WAAOA,KAAK,CAACD,GAAN,CAAU,IAAIN,OAAJ,CAAY,CAAZ,CAAV,CAAP;AACD;;AACMQ,EAAAA,GAAP,CAAWD,KAAX,EAAsC;AACpC,WAAOA,KAAK,CAACD,GAAN,CAAU,IAAIN,OAAJ,CAAY,IAAI,CAAC,CAAjB,CAAV,CAAP;AACD;;AACMS,EAAAA,GAAP,CAAWF,KAAX,EAAsC;AACpC,WAAOA,KAAK,CAACE,GAAN,CAAU,IAAIT,OAAJ,CAAY,CAAZ,CAAV,CAAP;AACD;;AACMU,EAAAA,GAAP,CAAWH,KAAX,EAAsC;AACpC,UAAM,IAAIN,eAAJ,CAAoB,mCAApB,CAAN;AACD;;AAEMU,EAAAA,IAAP,CAAYJ,KAAZ,EAAuC;AACrC,UAAM,IAAIN,eAAJ,CAAoB,mCAApB,CAAN;AACD;;AACMW,EAAAA,GAAP,CAAWL,KAAX,EAAsC;AACpC,UAAM,IAAIN,eAAJ,CAAoB,8BAApB,CAAN;AACD;;AAEMY,EAAAA,EAAP,CAAUN,KAAV,EAAyC;AACvC,WAAO;AAAEO,MAAAA,MAAM,EAAE,IAAIZ,OAAJ,CAAY,KAAKG,OAAL,IAAgBE,KAAK,CAACF,OAAlC;AAAV,KAAP;AACD;;AAEMU,EAAAA,GAAP,CAAWR,KAAX,EAA0C;AACxC,WAAO;AAAEO,MAAAA,MAAM,EAAE,IAAIZ,OAAJ,CAAY,KAAKG,OAAL,IAAgBE,KAAK,CAACF,OAAlC;AAAV,KAAP;AACD;;AAEMW,EAAAA,GAAP,CAAWT,KAAX,EAA0C;AACxC,WAAO;AAAEO,MAAAA,MAAM,EAAE,IAAIZ,OAAJ,CAAY,KAAKG,OAAL,KAAiBE,KAAK,CAACF,OAAnC;AAAV,KAAP;AACD;;AAEMY,EAAAA,IAAP,CAAYV,KAAZ,EAA2C;AACzC,WAAO;AACLO,MAAAA,MAAM,EAAE,IAAIZ,OAAJ,CAAY,KAAKG,OAAL,IAAgBE,KAAK,CAACF,OAAtB,IAAiC,CAAC,KAAKA,OAAnD;AADH,KAAP;AAGD;;AA5CqC","sourcesContent":["import { BooleanResult, Computable, Numeric, Result } from \".\";\nimport { ArithmeticError } from \"../errors\";\n\n/**\n * boolean computable value\n */\nexport class Boolean extends Computable {\n  private boolVal: boolean;\n\n  constructor(value: boolean) {\n    super();\n    this.boolVal = value;\n  }\n\n  public add(other: Computable): Result {\n    return other.add(new Numeric(0));\n  }\n  public sub(other: Computable): Result {\n    return other.add(new Numeric(0 * -1));\n  }\n  public mul(other: Computable): Result {\n    return other.mul(new Numeric(0));\n  }\n  public div(other: Computable): Result {\n    throw new ArithmeticError(\"boolean division is not supported\");\n  }\n\n  public rdiv(other: Computable): Result {\n    throw new ArithmeticError(\"boolean division is not supported\");\n  }\n  public pow(other: Computable): Result {\n    throw new ArithmeticError(\"boolean powers not supported\");\n  }\n\n  public or(other: Boolean): BooleanResult {\n    return { result: new Boolean(this.boolVal || other.boolVal) };\n  }\n\n  public and(other: Boolean): BooleanResult {\n    return { result: new Boolean(this.boolVal && other.boolVal) };\n  }\n\n  public xor(other: Boolean): BooleanResult {\n    return { result: new Boolean(this.boolVal !== other.boolVal) };\n  }\n\n  public nand(other: Boolean): BooleanResult {\n    return {\n      result: new Boolean(this.boolVal == other.boolVal && !this.boolVal),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}