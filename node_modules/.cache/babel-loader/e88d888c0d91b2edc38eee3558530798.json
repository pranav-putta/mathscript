{"ast":null,"code":"import { AssignNode, BinaryOperatorNode, CompoundNode, isComputableNode, SingleValueNode, UnaryOperatorNode, VariableNode, ProcedureNode } from \"./ast\";\nimport { Numeric, Logical } from \"./computable/computable\";\nimport { UnevaluatedMatrix } from \"./computable/matrix\";\nimport { MatrixError, ParsingError, SymbolError, SyntaxError } from \"./errors\";\nimport { Lexer } from \"./lexer\";\nimport { TokenType, isNumericToken, isSymbolToken } from \"./token\";\nexport class Parser {\n  constructor(lexer) {\n    this.lexer = void 0;\n    this.current_token = void 0;\n    this.lexer = lexer;\n    this.current_token = this.lexer.next_token();\n  }\n  /**\n   * parse tokens into an abstract syntax tree for traversal\n   */\n\n\n  parse() {\n    let node = this.program();\n\n    if (this.current_token.type != TokenType.eof) {\n      throw new SyntaxError(\"parsing didn't go as expected!\");\n    }\n\n    return node;\n  }\n  /**\n   * identify expression\n   * expr   : term ((PLUS | MINUS) term)* | term ((PLUS | MINUS)term)*\n   * term   : powers ((MUL | DIV ) powers)*\n   * powers : factor ((POW) factor)*\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix | variable | procedure | (TRUE | FALSE)\n   * matrix :  lbracket (row)* rbracket\n   */\n\n\n  expr(ignoreWhiteSpace = true) {\n    let powers = this.binop(this.factor, [TokenType.pow]);\n    let mul_div = this.binop(powers, [TokenType.mul, TokenType.div]);\n    let add_plus = this.binop(mul_div, [TokenType.plus, TokenType.minus], ignoreWhiteSpace);\n    let and = this.binop(add_plus, [TokenType.and_bool]);\n    let or = this.binop(and, [TokenType.or_bool]);\n    return or();\n  }\n\n  bool() {\n    let token = this.current_token;\n\n    if (token.type == TokenType.id) {\n      if (token.value === Lexer.reserved_keywords[\"true\"].value) {\n        return new SingleValueNode(new Logical(true));\n      } else if (token.value === Lexer.reserved_keywords[\"false\"].value) {\n        return new SingleValueNode(new Logical(true));\n      }\n    }\n\n    throw new ParsingError(\"unexpected symbol: \" + token.value);\n  }\n  /**\n   * create a binary operation function\n   * @param func function to process\n   * @param operators operators to check for\n   * @param ignoreWhiteSpace check for whitespace pattern \" + 1\" => plus, \" +1\" => unary positive\n   */\n\n\n  binop(func, operators, ignoreWhiteSpace = true) {\n    // create a callable function\n    let call = () => {\n      // left node\n      let node = func();\n      let token = this.current_token;\n\n      while (operators.includes(token.type)) {\n        if (ignoreWhiteSpace || this.lexer.peek(1) == \" \" || this.lexer.peek(-1) != \" \") {\n          this.eat(token.type);\n          node = new BinaryOperatorNode(node, token, func());\n        } else {\n          return node;\n        }\n      }\n\n      return node;\n    };\n\n    return call;\n  }\n  /**\n   * identify factor\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix\n   * matrix :  lbracket (row)* rbracket\n   * @return abstract syntax node\n   */\n\n\n  factor() {\n    let token = this.current_token;\n\n    if (token.type == TokenType.plus) {\n      // positive sign\n      this.eat(TokenType.plus);\n      return new UnaryOperatorNode(token, this.factor());\n    } else if (token.type == TokenType.minus) {\n      // negation sign\n      this.eat(TokenType.minus);\n      return new UnaryOperatorNode(token, this.factor());\n    } else if (isNumericToken(token)) {\n      // token is a number\n      this.eat(TokenType.num);\n      return new SingleValueNode(new Numeric(token.value));\n    } else if (token.type == TokenType.lparen) {\n      // lparen expr rparen\n      this.eat(TokenType.lparen);\n      let node = this.expr();\n      this.eat(TokenType.rparen);\n      return node;\n    } else if (token.type == TokenType.lbracket) {\n      // matrix\n      let matrix = this.matrix();\n      return new SingleValueNode(matrix);\n    } else if (token.type == TokenType.larrow) {\n      // vector (meaning single row matrix)\n      let vector = this.vector();\n      return new SingleValueNode(vector);\n    } else if (token.type == TokenType.id) {\n      // identifier\n      let next = this.lexer.peek();\n\n      if (next && next == \"(\") {\n        // procedure\n        return this.procedure();\n      } else {\n        // variable identifier\n        return this.variable();\n      }\n    } else {\n      return this.bool();\n    }\n\n    throw new SyntaxError(\"unexpected symbol\");\n  }\n  /**\n   * vector : single row matrix\n   */\n\n\n  vector() {\n    // check left arrow\n    this.eat(TokenType.larrow); // get one row\n\n    let row = this.matrix_row(TokenType.rarrow); // check right arrow\n\n    this.eat(TokenType.rarrow);\n    return new UnevaluatedMatrix([row]);\n  }\n  /**\n   * matrix :  lbracket (row ;)* (row ]) rbracket\n   */\n\n\n  matrix() {\n    let arr = new Array(); // check left bracket\n\n    this.eat(TokenType.lbracket, \"parsing matrix: \"); // loop through rows\n\n    while (this.current_token.type != TokenType.rbracket) {\n      let row = this.matrix_row(TokenType.rbracket);\n      arr.push(row);\n\n      if (this.current_token.type == TokenType.semicolon) {\n        this.eat(TokenType.semicolon, \"parsing matrix row: \");\n      }\n    } // check right bracket\n\n\n    this.eat(TokenType.rbracket, \"parsing matrix: \");\n    return new UnevaluatedMatrix(arr);\n  }\n  /**\n   * row : (factor,)*\n   */\n\n\n  matrix_row(endToken) {\n    let arr = new Array();\n\n    while (true) {\n      let val = this.expr(false); // make sure the element is computable\n\n      if (isComputableNode(val)) {\n        // everything else is good, push element into row\n        arr.push(val); // if row hasn't reached end, consume 'comma' separator\n\n        if (this.current_token.type != TokenType.semicolon && this.current_token.type != endToken) {\n          if (this.current_token.type == TokenType.comma) {\n            this.eat(TokenType.comma, \"parsing matrix row: \");\n          }\n        } else {\n          break;\n        }\n      } else {\n        throw new MatrixError(\"matrix parsing error: expected a numeric element\");\n      }\n    }\n\n    return arr;\n  }\n  /**\n   * consume token and advance to next token\n   * @param type token type to verify\n   */\n\n\n  eat(type, message) {\n    if (this.current_token.type == type) {\n      // if expected token type and current token type matches, proceed to next token\n      this.current_token = this.lexer.next_token();\n    } else {\n      // if token type does not match, a syntax error has happened\n      throw new SyntaxError(message || \"\" + \"expected \" + type.toString() + \", but got \" + this.current_token.type.toString());\n    }\n  }\n  /**\n   * variable : id\n   */\n\n\n  variable() {\n    if (isSymbolToken(this.current_token)) {\n      let node = new VariableNode(this.current_token);\n      this.eat(TokenType.id);\n      return node;\n    }\n\n    throw new SymbolError(\"couldn't parse variable name\");\n  }\n  /**\n   * program : compound eof\n   */\n\n\n  program() {\n    let node = this.compound();\n    this.eat(TokenType.eof);\n    return node;\n  }\n  /**\n   * compound: statement_list\n   */\n\n\n  compound() {\n    return new CompoundNode(this.statement_list());\n  }\n  /**\n   * statement_list : statement | statement endl statement_list\n   */\n\n\n  statement_list() {\n    let results = this.statement();\n\n    while (this.current_token.type == TokenType.endl) {\n      // ignore all end lines\n      while (this.current_token.type == TokenType.endl) {\n        this.eat(TokenType.endl);\n      }\n\n      results = results.concat(this.statement());\n    }\n\n    if (this.current_token.type == TokenType.id) {\n      throw new SyntaxError(\"unexpected identifier\");\n    }\n\n    return results;\n  }\n  /**\n   * statement : id_statement | expr\n   */\n\n\n  statement() {\n    if (this.current_token.type == TokenType.id) {\n      return this.id_statement();\n    } else if (this.current_token.type != TokenType.eof) {\n      return [this.expr(true)];\n    } else {\n      return [];\n    }\n  }\n  /**\n   * id_statement : assignemnt | procedure | expr\n   */\n\n\n  id_statement() {\n    let token = this.current_token;\n\n    if (token.type == TokenType.id) {\n      if (this.lexer.peekToken() == \"=\") {\n        return this.assignment();\n      } else if (this.lexer.peekToken() == \"(\") {\n        return [this.procedure()];\n      } else {\n        return [this.expr()];\n      }\n    }\n\n    throw new ParsingError(\"couldn't find an identifier!\");\n  }\n  /**\n   * assignment : (variable = expr) (,variable = expr)*\n   */\n\n\n  assignment() {\n    let left = this.variable();\n    let token = this.current_token;\n    this.eat(TokenType.assign, \"parsing assignment: \");\n    let right = this.expr();\n    let assignments = [new AssignNode(left, token, right)]; //  check if multiline assignment\n\n    if (this.current_token.type == TokenType.comma) {\n      this.eat(TokenType.comma);\n      let next = this.assignment();\n      assignments = assignments.concat(next);\n    }\n\n    return assignments;\n  }\n  /**\n   * procedure : id lparen (expr,)* rparen\n   */\n\n\n  procedure() {\n    let token = this.current_token;\n\n    if (!isSymbolToken(token)) {\n      throw new SymbolError(\"expected an identifier symbol but didn't get it!\");\n    }\n\n    this.eat(TokenType.id);\n    this.eat(TokenType.lparen);\n    let args = [];\n\n    while (true) {\n      args.push(this.expr());\n\n      if (this.current_token.type == TokenType.comma) {\n        this.eat(TokenType.comma);\n      } else {\n        break;\n      }\n    }\n\n    this.eat(TokenType.rparen);\n    return new ProcedureNode(token, args);\n  }\n\n}","map":{"version":3,"sources":["/Users/pranavputta/GitHub/linalg_lang/frontend/src/interpreter/parser.ts"],"names":["AssignNode","BinaryOperatorNode","CompoundNode","isComputableNode","SingleValueNode","UnaryOperatorNode","VariableNode","ProcedureNode","Numeric","Logical","UnevaluatedMatrix","MatrixError","ParsingError","SymbolError","SyntaxError","Lexer","TokenType","isNumericToken","isSymbolToken","Parser","constructor","lexer","current_token","next_token","parse","node","program","type","eof","expr","ignoreWhiteSpace","powers","binop","factor","pow","mul_div","mul","div","add_plus","plus","minus","and","and_bool","or","or_bool","bool","token","id","value","reserved_keywords","func","operators","call","includes","peek","eat","num","lparen","rparen","lbracket","matrix","larrow","vector","next","procedure","variable","row","matrix_row","rarrow","arr","Array","rbracket","push","semicolon","endToken","val","comma","message","toString","compound","statement_list","results","statement","endl","concat","id_statement","peekToken","assignment","left","assign","right","assignments","args"],"mappings":"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","sourcesContent":["import {\n  AssignNode,\n  AST,\n  BinaryOperatorNode,\n  CompoundNode,\n  ComputableNode,\n  isComputableNode,\n  SingleValueNode,\n  UnaryOperatorNode,\n  VariableNode,\n  ProcedureNode,\n} from \"./ast\";\nimport { Numeric, Logical } from \"./computable/computable\";\nimport { UnevaluatedMatrix } from \"./computable/matrix\";\nimport { MatrixError, ParsingError, SymbolError, SyntaxError } from \"./errors\";\nimport { Lexer } from \"./lexer\";\nimport { TokenType, Token, isNumericToken, isSymbolToken } from \"./token\";\n\nexport class Parser {\n  private lexer: Lexer;\n  private current_token: Token;\n\n  constructor(lexer: Lexer) {\n    this.lexer = lexer;\n    this.current_token = this.lexer.next_token();\n  }\n\n  /**\n   * parse tokens into an abstract syntax tree for traversal\n   */\n  public parse(): AST {\n    let node = this.program();\n    if (this.current_token.type != TokenType.eof) {\n      throw new SyntaxError(\"parsing didn't go as expected!\");\n    }\n    return node;\n  }\n\n  /**\n   * identify expression\n   * expr   : term ((PLUS | MINUS) term)* | term ((PLUS | MINUS)term)*\n   * term   : powers ((MUL | DIV ) powers)*\n   * powers : factor ((POW) factor)*\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix | variable | procedure | (TRUE | FALSE)\n   * matrix :  lbracket (row)* rbracket\n   */\n  private expr(ignoreWhiteSpace: boolean = true): AST {\n    let powers = this.binop(this.factor, [TokenType.pow]);\n    let mul_div = this.binop(powers, [TokenType.mul, TokenType.div]);\n    let add_plus = this.binop(\n      mul_div,\n      [TokenType.plus, TokenType.minus],\n      ignoreWhiteSpace\n    );\n    let and = this.binop(add_plus, [TokenType.and_bool]);\n    let or = this.binop(and, [TokenType.or_bool]);\n    return or();\n  }\n\n  private bool(): AST {\n    let token = this.current_token;\n    if (token.type == TokenType.id) {\n      if (token.value === Lexer.reserved_keywords[\"true\"].value) {\n        return new SingleValueNode(new Logical(true));\n      } else if (token.value === Lexer.reserved_keywords[\"false\"].value) {\n        return new SingleValueNode(new Logical(true));\n      }\n    }\n    throw new ParsingError(\"unexpected symbol: \" + token.value);\n  }\n\n  /**\n   * create a binary operation function\n   * @param func function to process\n   * @param operators operators to check for\n   * @param ignoreWhiteSpace check for whitespace pattern \" + 1\" => plus, \" +1\" => unary positive\n   */\n  private binop(\n    func: () => AST,\n    operators: TokenType[],\n    ignoreWhiteSpace: boolean = true\n  ): () => AST {\n    // create a callable function\n    let call = (): AST => {\n      // left node\n      let node: AST = func();\n      let token: Token = this.current_token;\n      while (operators.includes(token.type)) {\n        if (\n          ignoreWhiteSpace ||\n          this.lexer.peek(1) == \" \" ||\n          this.lexer.peek(-1) != \" \"\n        ) {\n          this.eat(token.type);\n          node = new BinaryOperatorNode(node, token, func());\n        } else {\n          return node;\n        }\n      }\n      return node;\n    };\n    return call;\n  }\n\n  /**\n   * identify factor\n   * factor : (PLUS | MINUS) factor | NUMBER | lparen expr rparen | matrix\n   * matrix :  lbracket (row)* rbracket\n   * @return abstract syntax node\n   */\n  private factor(): AST {\n    let token = this.current_token;\n    if (token.type == TokenType.plus) {\n      // positive sign\n      this.eat(TokenType.plus);\n      return new UnaryOperatorNode(token, this.factor());\n    } else if (token.type == TokenType.minus) {\n      // negation sign\n      this.eat(TokenType.minus);\n      return new UnaryOperatorNode(token, this.factor());\n    } else if (isNumericToken(token)) {\n      // token is a number\n      this.eat(TokenType.num);\n      return new SingleValueNode(new Numeric(token.value));\n    } else if (token.type == TokenType.lparen) {\n      // lparen expr rparen\n      this.eat(TokenType.lparen);\n      let node: AST = this.expr();\n      this.eat(TokenType.rparen);\n      return node;\n    } else if (token.type == TokenType.lbracket) {\n      // matrix\n      let matrix: UnevaluatedMatrix = this.matrix();\n      return new SingleValueNode(matrix);\n    } else if (token.type == TokenType.larrow) {\n      // vector (meaning single row matrix)\n      let vector: UnevaluatedMatrix = this.vector();\n      return new SingleValueNode(vector);\n    } else if (token.type == TokenType.id) {\n      // identifier\n      let next = this.lexer.peek();\n      if (next && next == \"(\") {\n        // procedure\n        return this.procedure();\n      } else {\n        // variable identifier\n        return this.variable();\n      }\n    } else {\n      return this.bool();\n    }\n\n    throw new SyntaxError(\"unexpected symbol\");\n  }\n\n  /**\n   * vector : single row matrix\n   */\n  private vector(): UnevaluatedMatrix {\n    // check left arrow\n    this.eat(TokenType.larrow);\n    // get one row\n    let row = this.matrix_row(TokenType.rarrow);\n    // check right arrow\n    this.eat(TokenType.rarrow);\n    return new UnevaluatedMatrix([row]);\n  }\n\n  /**\n   * matrix :  lbracket (row ;)* (row ]) rbracket\n   */\n  private matrix(): UnevaluatedMatrix {\n    let arr: ComputableNode[][] = new Array();\n    // check left bracket\n    this.eat(TokenType.lbracket, \"parsing matrix: \");\n    // loop through rows\n    while (this.current_token.type != TokenType.rbracket) {\n      let row = this.matrix_row(TokenType.rbracket);\n      arr.push(row);\n      if (this.current_token.type == TokenType.semicolon) {\n        this.eat(TokenType.semicolon, \"parsing matrix row: \");\n      }\n    }\n    // check right bracket\n    this.eat(TokenType.rbracket, \"parsing matrix: \");\n    return new UnevaluatedMatrix(arr);\n  }\n\n  /**\n   * row : (factor,)*\n   */\n  private matrix_row(endToken: TokenType): ComputableNode[] {\n    let arr: ComputableNode[] = new Array();\n\n    while (true) {\n      let val = this.expr(false);\n      // make sure the element is computable\n      if (isComputableNode(val)) {\n        // everything else is good, push element into row\n        arr.push(val);\n        // if row hasn't reached end, consume 'comma' separator\n        if (\n          this.current_token.type != TokenType.semicolon &&\n          this.current_token.type != endToken\n        ) {\n          if (this.current_token.type == TokenType.comma) {\n            this.eat(TokenType.comma, \"parsing matrix row: \");\n          }\n        } else {\n          break;\n        }\n      } else {\n        throw new MatrixError(\n          \"matrix parsing error: expected a numeric element\"\n        );\n      }\n    }\n\n    return arr;\n  }\n\n  /**\n   * consume token and advance to next token\n   * @param type token type to verify\n   */\n  private eat(type: TokenType, message?: string) {\n    if (this.current_token.type == type) {\n      // if expected token type and current token type matches, proceed to next token\n      this.current_token = this.lexer.next_token();\n    } else {\n      // if token type does not match, a syntax error has happened\n      throw new SyntaxError(\n        message ||\n          \"\" +\n            \"expected \" +\n            type.toString() +\n            \", but got \" +\n            this.current_token.type.toString()\n      );\n    }\n  }\n\n  /**\n   * variable : id\n   */\n  private variable(): VariableNode {\n    if (isSymbolToken(this.current_token)) {\n      let node = new VariableNode(this.current_token);\n      this.eat(TokenType.id);\n      return node;\n    }\n    throw new SymbolError(\"couldn't parse variable name\");\n  }\n\n  /**\n   * program : compound eof\n   */\n  private program(): AST {\n    let node = this.compound();\n    this.eat(TokenType.eof);\n    return node;\n  }\n\n  /**\n   * compound: statement_list\n   */\n  private compound(): AST {\n    return new CompoundNode(this.statement_list());\n  }\n\n  /**\n   * statement_list : statement | statement endl statement_list\n   */\n  private statement_list(): AST[] {\n    let results = this.statement();\n    while (this.current_token.type == TokenType.endl) {\n      // ignore all end lines\n      while (this.current_token.type == TokenType.endl) {\n        this.eat(TokenType.endl);\n      }\n      results = results.concat(this.statement());\n    }\n\n    if (this.current_token.type == TokenType.id) {\n      throw new SyntaxError(\"unexpected identifier\");\n    }\n\n    return results;\n  }\n\n  /**\n   * statement : id_statement | expr\n   */\n  private statement(): AST[] {\n    if (this.current_token.type == TokenType.id) {\n      return this.id_statement();\n    } else if (this.current_token.type != TokenType.eof) {\n      return [this.expr(true)];\n    } else {\n      return [];\n    }\n  }\n  /**\n   * id_statement : assignemnt | procedure | expr\n   */\n  private id_statement(): AST[] {\n    let token = this.current_token;\n    if (token.type == TokenType.id) {\n      if (this.lexer.peekToken() == \"=\") {\n        return this.assignment();\n      } else if (this.lexer.peekToken() == \"(\") {\n        return [this.procedure()];\n      } else {\n        return [this.expr()];\n      }\n    }\n\n    throw new ParsingError(\"couldn't find an identifier!\");\n  }\n\n  /**\n   * assignment : (variable = expr) (,variable = expr)*\n   */\n  private assignment(): AssignNode[] {\n    let left = this.variable();\n    let token = this.current_token;\n    this.eat(TokenType.assign, \"parsing assignment: \");\n    let right = this.expr();\n    let assignments = [new AssignNode(left, token, right)];\n    //  check if multiline assignment\n    if (this.current_token.type == TokenType.comma) {\n      this.eat(TokenType.comma);\n      let next = this.assignment();\n      assignments = assignments.concat(next);\n    }\n    return assignments;\n  }\n\n  /**\n   * procedure : id lparen (expr,)* rparen\n   */\n  private procedure(): ProcedureNode {\n    let token = this.current_token;\n    if (!isSymbolToken(token)) {\n      throw new SymbolError(\"expected an identifier symbol but didn't get it!\");\n    }\n    this.eat(TokenType.id);\n    this.eat(TokenType.lparen);\n    let args = [];\n    while (true) {\n      args.push(this.expr());\n      if (this.current_token.type == TokenType.comma) {\n        this.eat(TokenType.comma);\n      } else {\n        break;\n      }\n    }\n    this.eat(TokenType.rparen);\n    return new ProcedureNode(token, args);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}