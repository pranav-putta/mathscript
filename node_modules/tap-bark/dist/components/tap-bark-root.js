"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const setup_tap_parser_1 = require("../setup-tap-parser");
const tap_bark_results_1 = require("./tap-bark-results");
const tap_bark_progress_1 = require("./tap-bark-progress");
function TapBarkRoot(props) {
    const [warnings, setWarnings] = react_1.useState([]);
    const [totalTests, setTotalTests] = react_1.useState(0);
    const [currentTest, setCurrentTest] = react_1.useState(0);
    const [results, setResults] = react_1.useState(null);
    const [complete, setComplete] = react_1.useState(false);
    setup_tap_parser_1.setupTapParser(props.showProgress, {
        setCurrentTest,
        setTotalTests,
        setWarnings,
        setResults
    });
    if (results) {
        if (complete === false) {
            setTimeout(() => process.exit(results.ok ? 0 : 1), 100);
            setComplete(true);
        }
        ;
        return react_1.default.createElement(tap_bark_results_1.TapBarkResults, Object.assign({}, { results, totalTests, warnings }));
    }
    return react_1.default.createElement(tap_bark_progress_1.TapBarkProgress, Object.assign({ showProgress: props.showProgress }, { currentTest, totalTests }));
}
exports.TapBarkRoot = TapBarkRoot;
//# sourceMappingURL=tap-bark-root.js.map