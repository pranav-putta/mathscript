"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const ink_1 = require("ink");
const tap_bark_1 = require("./tap-bark");
const CONSOLE_WARNING_REGEXP = /^# WARN: (.*)/;
function setupTapParser(showProgress, callbacks) {
    const [setup, setSetup] = react_1.useState(false);
    if (setup)
        return;
    if (showProgress) {
        tap_bark_1.TapBark.tapParser.on("comment", (comment) => {
            const message = comment.replace("# ", "");
            if (CONSOLE_WARNING_REGEXP.test(comment)) {
                callbacks.setWarnings(previousWarnings => [
                    ...previousWarnings,
                    react_1.default.createElement(ink_1.Color, { yellow: true, key: `warn-${previousWarnings.length}` }, message)
                ]);
            }
        });
        tap_bark_1.TapBark.tapParser.on("assert", (assertion) => callbacks.setCurrentTest(assertion.id));
    }
    tap_bark_1.TapBark.tapParser.on("plan", (plan) => callbacks.setTotalTests(plan.end));
    tap_bark_1.TapBark.tapParser.on("complete", (r) => {
        callbacks.setResults({
            ok: r.ok,
            pass: r.pass || 0,
            fail: r.fail || (r.failures || []).length,
            ignore: (r.skip || 0) + (r.todo || 0),
            failures: r.failures || []
        });
    });
    setSetup(true);
}
exports.setupTapParser = setupTapParser;
//# sourceMappingURL=setup-tap-parser.js.map