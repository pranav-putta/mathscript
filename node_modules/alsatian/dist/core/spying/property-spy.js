"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const spy_call_1 = require("./spy-call");
class PropertySpy {
    constructor(target, propertyName) {
        this._getCalls = [];
        this._setCalls = [];
        this._descriptorTarget = target;
        this._propertyName = propertyName;
        if (!Object.getOwnPropertyDescriptor(target, this._propertyName)) {
            this._descriptorTarget = target.constructor.prototype;
        }
        const propertyDescriptor = Object.getOwnPropertyDescriptor(this._descriptorTarget, this._propertyName);
        if (propertyDescriptor === undefined) {
            throw new TypeError(`${propertyName} is not a property.`);
        }
        this._originialGetter = propertyDescriptor.get;
        this._originialSetter = propertyDescriptor.set;
        this._getter = this._originialGetter;
        this._setter = this._originialSetter;
        this._descriptorTarget = target;
        Object.defineProperty(this._descriptorTarget, this._propertyName, {
            get: this._get.bind(this),
            set: this._set.bind(this)
        });
    }
    get setCalls() {
        return this._setCalls;
    }
    andReturnValue(value) {
        this._value = value;
        this._returnValue = true;
        return this;
    }
    andCallGetter(getter) {
        this._getter = getter;
        this._returnValue = false;
        return this;
    }
    andCallSetter(setter) {
        this._setter = setter;
        this._returnValue = false;
        return this;
    }
    restore() {
        Object.defineProperty(this._descriptorTarget, this._propertyName, {
            get: this._originialGetter,
            set: this._originialSetter
        });
    }
    _get() {
        this._getCalls.push(new spy_call_1.SpyCall([]));
        if (this._returnValue) {
            return this._value;
        }
        return this._getter ? this._getter.call(this._descriptorTarget) : undefined;
    }
    _set(value) {
        this._setCalls.push(new spy_call_1.SpyCall([value]));
        this._setter.call(this._descriptorTarget, value);
        if (!this._returnValue) {
            this._value = value;
        }
    }
}
exports.PropertySpy = PropertySpy;
//# sourceMappingURL=property-spy.js.map